[{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"setup-an-llm-provider","dir":"Articles","previous_headings":"","what":"Setup an LLM provider","title":"Getting started","text":"‘tidyprompt’ can used LLM provider capable completing chat. moment, ‘tidyprompt’ includes pre-built functions connect various LLM providers, Ollama, OpenAI, OpenRouter, Mistral, Groq, XAI (Grok), Google Gemini. llm_provider(), can easily write hook LLM provider. make API calls using ‘httr’ package use another R package already hook LLM provider want use. API choice follows structure OpenAI API, can call llm_provider_openai() change relevant parameters (like URL API key).","code":"# Ollama running on local PC ollama <- llm_provider_ollama(   parameters = list(model = \"llama3.1:8b\"), )  # OpenAI API openai <- llm_provider_openai(   parameters = list(model = \"gpt-4o-mini\") )  # Various providers via OpenRouter (e.g., Anthropic) openrouter <- llm_provider_openrouter(   parameters = list(model = \"anthropic/claude-3.5-sonnet\") )  # ... functions also included for Mistral, Groq, XAI (Grok), and Google Gemini  # ... or easily create your own hook for any other LLM provider; #   see ?llm_provider for more information; also take a look at the source code of #   llm_provider_ollama() and llm_provider_openai(). For APIs that follow the structure #   of the OpenAI API for chat completion, you can use llm_provider_openai() and change #   the relevant parameters (like the url and the API key)."},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"basic-prompting","dir":"Articles","previous_headings":"","what":"Basic prompting","title":"Getting started","text":"simple string serves base prompt. adding prompt wraps, can influence various aspects LLM handles prompt, verifying output structured valid (including retries feedback LLM ). add_text() simple example prompt wrap. simply adds text end base prompt. can also construct final prompt text, without sending LLM provider.","code":"\"Hi there!\" |>     send_prompt(ollama) #> --- Sending request to LLM provider (llama3.1:8b): --- #> Hi there! #> --- Receiving response from LLM provider: --- #> It's nice to meet you. Is there something I can help you with, or would you like to chat? #> [1] \"It's nice to meet you. Is there something I can help you with, or would you like to chat?\" \"Hi there!\" |>     add_text(\"What is a large language model? Explain in 10 words.\") |>     send_prompt(ollama) #> --- Sending request to LLM provider (llama3.1:8b): --- #> Hi there! #>  #> What is a large language model? Explain in 10 words. #> --- Receiving response from LLM provider: --- #> Sophisticated computer program that processes and generates human-like written language. #> [1] \"Sophisticated computer program that processes and generates human-like written language.\" \"Hi there!\" |>     add_text(\"What is a large language model? Explain in 10 words.\") #> <tidyprompt> #> The base prompt is modified by a prompt wrap, resulting in: #> > Hi there! #> >  #> > What is a large language model? Explain in 10 words.  #> Use '<tidyprompt>$prompt_wraps' to show the prompt wraps. #> Use '<tidyprompt>$base_prompt' to show the base prompt text. #> Use '<tidyprompt> |> construct_prompt_text()' to get the full prompt text."},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"retrieving-output-in-a-specific-format","dir":"Articles","previous_headings":"","what":"Retrieving output in a specific format","title":"Getting started","text":"Using prompt wraps, can force LLM return output specific format. can also extract output turn character another data type. instance, answer_as_integer() adds prompt wrap forces LLM reply integer. achieve , prompt wrap add text base prompt, asking LLM reply integer. However, prompt wrap : also attempt extract validate integer LLM’s response. extraction validation fails, feedback sent back LLM, LLM can retry answering prompt. extraction function turns original character response numeric value, final output send_prompt() also numeric type. example prompt initially fail, succeed llm_feedback() retry.","code":"\"What is 2 + 2?\" |>     answer_as_integer() |>     send_prompt(ollama) #> --- Sending request to LLM provider (llama3.1:8b): --- #> What is 2 + 2? #>  #> You must answer with only an integer (use no other characters). #> --- Receiving response from LLM provider: --- #> 4 #> [1] 4 \"What is 2 + 2?\" |>     add_text(\"Please write out your reply in words, use no numbers.\") |>     answer_as_integer(add_instruction_to_prompt = FALSE) |>     send_prompt(ollama) #> --- Sending request to LLM provider (llama3.1:8b): --- #> What is 2 + 2? #>  #> Please write out your reply in words, use no numbers. #> --- Receiving response from LLM provider: --- #> Two plus two equals four. #> --- Sending request to LLM provider (llama3.1:8b): --- #> You must answer with only an integer (use no other characters). #> --- Receiving response from LLM provider: --- #> 4 #> [1] 4"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"adding-a-reasoning-mode-to-the-llm","dir":"Articles","previous_headings":"","what":"Adding a reasoning mode to the LLM","title":"Getting started","text":"Prompt wraps may also used add reasoning mode LLM. hypothesized improve LLM’s performance complex tasks. instance, answer_by_chain_of_thought() add chain thought reasoning mode prompt evaluation LLM. function wraps base prompt text within request LLM reason step step, asking provide final answer within ‘FINISH[]’. extraction function ensures final answer returned.","code":"\"What is 2 + 2?\" |>     answer_by_chain_of_thought() |>     answer_as_integer() |>     send_prompt(ollama) #> --- Sending request to LLM provider (llama3.1:8b): --- #> You are given a user's prompt. #> To answer the user's prompt, you need to think step by step to arrive at a final answer. #>  #> ----- START OF USER'S PROMPT ----- #> What is 2 + 2? #>  #> You must answer with only an integer (use no other characters). #> ----- END OF USER'S PROMPT ----- #>  #> What are the steps you would take to answer the user's prompt? #> Describe your thought process in the following format: #>   >> step 1: <step 1 description> #>   >> step 2: <step 2 description> #>   (etc.) #>  #> When you are done, you must type: #>   FINISH[<put here your final answer to the user's prompt>] #>  #> Make sure your final answer follows the logical conclusion of your thought process. #> --- Receiving response from LLM provider: --- #> >> step 1: Identify that the problem is a basic arithmetic operation involving addition. #> >> step 2: Recall the specific numbers involved in the operation, which are 2 and 2. #> >> step 3: Perform the operation by adding the two numbers together to get their sum. #>  #> FINISH[4] #> [1] 4"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"giving-tools-to-the-llm-autonomous-function-calling","dir":"Articles","previous_headings":"","what":"Giving tools to the LLM (autonomous function-calling)","title":"Getting started","text":"add_tools(), can define R functions give LLM ability call process output. enables LLM autonomously retrieve additional information take actions. add_tools() can also used give LLM access pre-existing functions packages base R. documentation extracted available help file.","code":"# Define a function that returns fake data about the temperature in a location   temperature_in_location <- function(     location = c(\"Amsterdam\", \"Utrecht\", \"Enschede\"),     unit = c(\"Celcius\", \"Fahrenheit\")   ) {     location <- match.arg(location)     unit <- match.arg(unit)      temperature_celcius <- switch(       location,       \"Amsterdam\" = 32.55,       \"Utrecht\" = 19.8,       \"Enschede\" = 22.7     )      if (unit == \"Celcius\") {       return(temperature_celcius)     } else {       return(temperature_celcius * 9/5 + 32)     }   }    # Add documentation to the function for the LLM   temperature_in_location <- add_tools_add_documentation(     temperature_in_location,     description = \"Get the temperature in a location\",     arguments = list(       location = \"Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'\",       unit = \"Unit, must be one of: 'Celcius', 'Fahrenheit'\"     ),     return_value = \"The temperature in the specified location and unit\"   )    # Ask the LLM a question which can be answered with the function   \"Hi, what is the weather temperature in Enschede?\" |>     add_text(\"I want to know the Celcius degrees.\") |>     answer_as_integer() |>     add_tools(temperature_in_location) |>     send_prompt(ollama) #> --- Sending request to LLM provider (llama3.1:8b): --- #> Hi, what is the weather temperature in Enschede? #>  #> I want to know the Celcius degrees. #>  #> You must answer with only an integer (use no other characters). #>  #> If you need more information, you can call functions to help you. #> To call a function, output a JSON object with the following format: #>  #> { #>   \"function\": \"<function name>\", #>   \"arguments\": { #>     \"<argument_name>\": <argument_value>, #>     ... #>   } #> } #>  #> (Note: you cannot call other functions within arguments.) #>  #> The following functions are available: #>  #>   function name: temperature_in_location #>   description: Get the temperature in a location #>   arguments: #>     - location: Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede' #>     - unit: Unit, must be one of: 'Celcius', 'Fahrenheit' #>   return value: The temperature in the specified location and unit #>  #> After you call a function, wait until you receive more information. #> Use the information to decide your next steps or provide a final response. #> --- Receiving response from LLM provider: --- #> To get the weather temperature in Enschede, I will call the `temperature_in_location` function with the required arguments. #>  #> Here's my first action: #>  #> ``` #> { #>   \"function\": \"temperature_in_location\", #>   \"arguments\": { #>     \"location\": \"Enschede\", #>     \"unit\": \"Celcius\" #>   } #> } #> ``` #>  #> Please wait for more information... #> --- Sending request to LLM provider (llama3.1:8b): --- #> function called: temperature_in_location #> arguments used: location = Enschede, unit = Celcius #> result: 22.7 #> --- Receiving response from LLM provider: --- #> The current temperature in Enschede is 22.7°C. #>  #> So, my response to your original question is: #>  #> 22.7 #> --- Sending request to LLM provider (llama3.1:8b): --- #> You must answer with only an integer (use no other characters). #> --- Receiving response from LLM provider: --- #> 22 #> [1] 22 \"What are the files in my current directory?\" |>     add_tools(list.files) |>     send_prompt(ollama) #> --- Sending request to LLM provider (llama3.1:8b): --- #> What are the files in my current directory? #>  #> If you need more information, you can call functions to help you. #> To call a function, output a JSON object with the following format: #>  #> { #>   \"function\": \"<function name>\", #>   \"arguments\": { #>     \"<argument_name>\": <argument_value>, #>     ... #>   } #> } #>  #> (Note: you cannot call other functions within arguments.) #>  #> The following functions are available: #>  #>   function name: list.files #>   description: List the Files in a Directory/Folder: These functions produce a character vector of the names of files #> or directories in the named directory. #>   arguments: #>     - path: a character vector of full path names; the default corresponds to the working directory, 'getwd()'.  Tilde expansion (see 'path.expand') is performed.  Missing values will be ignored.  Elements with a marked encoding will be converted to the native encoding (and if that fails, considered non-existent). #>     - pattern: an optional regular expression.  Only file names which match the regular expression will be returned. #>     - all.files: a logical value.  If 'FALSE', only the names of visible files are returned (following Unix-style visibility, that is files whose name does not start with a dot).  If 'TRUE', all file names will be returned. #>     - full.names: a logical value.  If 'TRUE', the directory path is prepended to the file names to give a relative file path.  If 'FALSE', the file names (rather than paths) are returned. #>     - recursive: logical.  Should the listing recurse into directories? #>     - ignore.case: logical.  Should pattern-matching be case-insensitive? #>     - include.dirs: logical.  Should subdirectory names be included in recursive listings?  (They always are in non-recursive ones). #>     - no..: logical.  Should both '\".\"' and '\"..\"' be excluded also from non-recursive listings? #>   return value: A character vector containing the names of the files in the #> specified directories (empty if there were no files).  If a path #> does not exist or is not a directory or is unreadable it is #> skipped. #> The files are sorted in alphabetical order, on the full path if #> 'full.names = TRUE'. #> 'list.dirs' implicitly has 'all.files = TRUE', and if 'recursive = #> TRUE', the answer includes 'path' itself (provided it is a #> readable directory). #> 'dir' is an alias for 'list.files'. #>  #> After you call a function, wait until you receive more information. #> Use the information to decide your next steps or provide a final response. #> --- Receiving response from LLM provider: --- #> I can call the \"list.files\" function with the necessary arguments. #>  #> Here's my JSON object calling the function: #>  #> ``` #> { #>   \"function\": \"list.files\", #>   \"arguments\": { #>     \"path\": \".\" #>   } #> } #> ``` #>  #> Please wait for the output to determine my next steps. #> --- Sending request to LLM provider (llama3.1:8b): --- #> function called: list.files #> arguments used: path = . #> result: getting_started.Rmd, getting_started.Rmd.orig, precompile vignettes.R #> --- Receiving response from LLM provider: --- #> The function has returned a result. #>  #> It seems that I have a single file in my current directory (which is represented by the '.' argument), which are: #>  #> 1. `getting_started.Rmd` #> 2. `getting_started.Rmd.orig` #> 3. `precompile vignettes.R` #>  #> Since there are multiple files, and they do not match any specific pattern or condition mentioned in the problem statement, I will conclude that this is indeed the list of files in my current directory. #>  #> Therefore, my final response is: #>  #> The files in your current directory are: `getting_started.Rmd`, `getting_started.Rmd.orig`, `precompile vignettes.R`. #> [1] \"The function has returned a result.\\n\\nIt seems that I have a single file in my current directory (which is represented by the '.' argument), which are:\\n\\n1. `getting_started.Rmd`\\n2. `getting_started.Rmd.orig`\\n3. `precompile vignettes.R`\\n\\nSince there are multiple files, and they do not match any specific pattern or condition mentioned in the problem statement, I will conclude that this is indeed the list of files in my current directory.\\n\\nTherefore, my final response is:\\n\\nThe files in your current directory are: `getting_started.Rmd`, `getting_started.Rmd.orig`, `precompile vignettes.R`.\""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"code-generation-and-evaluation","dir":"Articles","previous_headings":"","what":"Code generation and evaluation","title":"Getting started","text":"answer_as_code() provides advanced prompt wrap, various options enable LLM code generation. R code can extracted, parsed validity, optionally evaluated dedicated R session (using ‘callr’ package). prompt wrap can also set ‘tool mode’ (output_as_tool = TRUE), output R code returned LLM, can used formulate final answer.","code":"# From prompt to ggplot plot <- paste0(   \"Create a scatter plot of miles per gallon (mpg) versus\",   \" horsepower (hp) for the cars in the mtcars dataset.\",   \" Use different colors to represent the number of cylinders (cyl).\",   \" Make the plot nice and readable,\",   \" but also be creative, a little crazy, and have humour!\" ) |>   answer_as_code(     pkgs_to_use = c(\"ggplot2\"),     evaluate_code = TRUE,     return_mode = \"object\"   ) |>   send_prompt(openai) plot"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"creating-your-own-prompt-wraps","dir":"Articles","previous_headings":"","what":"Creating your own prompt wraps","title":"Getting started","text":"Using prompt_wrap(), can create prompt wraps. input prompt_wrap() wrap may string tidyprompt object. pass string, automatically turned tidyprompt object. hood, tidyprompt object just list base prompt (string) series prompt wraps. prompt_wrap() adds new prompt wrap list prompt wraps. prompt wrap list modification function, extraction function, /validation function (least one functions must present). modification function alters prompt text, extraction function applies transformation LLM’s response, validation function checks (transformed) LLM’s response valid. extraction validation functions can return feedback LLM, using llm_feedback(). extraction validation function returns , message sent back LLM, LLM can retry answering prompt according feedback. Feedback messages may reiteration instruction specific error message occured extraction validation. extractions validations applied without resulting feedback, LLM’s response (transformations extraction functions) returned. (send_prompt() responsible executing process.) simple example prompt wrap, just adds text base prompt: Shorter notation : Often times, may preferred make function takes prompt returns wrapped prompt: Take look source code answer_as_boolean(), also uses extraction: Take look source code , instance, answer_as_integer(), answer_by_chain_of_thought(), add_tools() advanced examples prompt wraps.","code":"prompt <- \"Hi there!\" |>   prompt_wrap(     modify_fn = function(base_prompt) {       paste(base_prompt, \"How are you?\", sep = \"\\n\\n\")     }   ) prompt <- \"Hi there!\" |>   prompt_wrap(\\(x) paste(x, \"How are you?\", sep = \"\\n\\n\")) my_prompt_wrap <- function(prompt) {   modify_fn <- function(base_prompt) {     paste(base_prompt, \"How are you?\", sep = \"\\n\\n\")   }    prompt_wrap(prompt, modify_fn) } prompt <- \"Hi there!\" |>   my_prompt_wrap() answer_as_boolean <- function(     prompt,     true_definition = NULL,     false_definition = NULL,     add_instruction_to_prompt = TRUE ) {   instruction <- \"You must answer with only TRUE or FALSE (use no other characters).\"   if (!is.null(true_definition))     instruction <- paste(instruction, glue::glue(\"TRUE means: {true_definition}.\"))   if (!is.null(false_definition))     instruction <- paste(instruction, glue::glue(\"FALSE means: {false_definition}.\"))    modify_fn <- function(original_prompt_text) {     if (!add_instruction_to_prompt) {       return(original_prompt_text)     }      glue::glue(\"{original_prompt_text}\\n\\n{instruction}\")   }    extraction_fn <- function(x) {     normalized <- tolower(trimws(x))     if (normalized %in% c(\"true\", \"false\")) {       return(as.logical(normalized))     }     return(llm_feedback(instruction))   }    prompt_wrap(prompt, modify_fn, extraction_fn) }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"breaking-out-of-the-evaluation-loop","dir":"Articles","previous_headings":"Creating your own prompt wraps","what":"Breaking out of the evaluation loop","title":"Getting started","text":"cases, may want exit extraction validation process early. instance, LLM may indicate unable answer prompt. cases, can extraction validation function return llm_break(). cause evaluation loop break, forwarding return statement send_prompt(). See quit_if() example .","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"extraction-versus-validation-functions","dir":"Articles","previous_headings":"Creating your own prompt wraps","what":"Extraction versus validation functions","title":"Getting started","text":"extraction validation functions can return llm_break() llm_feedback(). difference extraction validation functions extraction may transform LLM response pass next extraction /validation functions, validation function checks LLM response passes logical test (without altering response). Thus, wish, can perform validations extraction function.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html","id":"prompt-wrap-types-and-order-of-application","dir":"Articles","previous_headings":"Creating your own prompt wraps","what":"Prompt wrap types and order of application","title":"Getting started","text":"constructing prompt text evaluating prompt, prompt wraps applied prompt wrap prompt wrap (e.g., first extraction validation functions one wrap, ). order prompt wraps applied important. Currently, four types prompt wraps distinguished: ‘unspecified’, ‘break’, ‘mode’, ‘tool’. constructing prompt text, prompt wraps applied order types. Prompt wraps automatically reordered necesarry (keeping intact order prompt wraps type). evaluating prompt, prompt wraps applied reverse order types (.e., first ‘tool’, ‘mode’, ‘break’, finally ‘unspecified’). ‘tool’ prompt wraps may return value used final answer, ‘mode’ prompt wraps alter LLM forms final answer, ‘break’ prompt wraps quit evaluation early based specific final answer, ‘unspecified’ prompt wraps general type prompt wraps force final answer specific format.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luka Koning. Author, maintainer, copyright holder. Tjark Van de Merwe. Author, copyright holder. Kennispunt Twente. Funder.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koning L, Van de Merwe T (2024). tidyprompt: Prompt Large Language Models ('LLMs') Enhance Functionality. R package version 0.0.0.9000, https://tjarkvandemerwe.github.io/tidyprompt/, https://github.com/tjarkvandemerwe/tidyprompt.","code":"@Manual{,   title = {tidyprompt: Prompt Large Language Models ('LLMs') And Enhance Their Functionality},   author = {Luka Koning and Tjark {Van de Merwe}},   year = {2024},   note = {R package version 0.0.0.9000, https://tjarkvandemerwe.github.io/tidyprompt/},   url = {https://github.com/tjarkvandemerwe/tidyprompt}, }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/index.html","id":"tidyprompt","dir":"","previous_headings":"","what":"Prompt Large Language Models (LLMs) And Enhance Their Functionality","title":"Prompt Large Language Models (LLMs) And Enhance Their Functionality","text":"‘tidyprompt’ R package easily prompt large language models (‘LLMs’) enhance functionality. Key features ‘tidyprompt’ : tidy prompting: Efficiently construct prompts LLMs, using piping syntax (inspired ‘tidyverse’). Wrap base prompt prompt wraps influence LLM handles prompt. library pre-built prompt wraps included, can also write prompt wraps. structured output: Obtain structured output LLM, adhering specific type /format. Configure automatic retries feedback LLM output expected. reasoning modes: Make LLM answer prompt specific mode, chain--thought ReAct (Reasoning Acting) modes. function calling: Give LLM ability autonomously call R functions (‘tools’). , LLM can retrieve information take actions. ‘tidyprompt’ also supports R code generation evaluation, allowing LLMs run R code. compatible LLM providers: Usable LLM provider supports chat completion. Use included LLM providers Ollama (local PC/server), OpenAI, OpenRouter (offering various providers, including Anthropic), Mistral, Groq, XAI (Grok), Google Gemini. write hook LLM provider.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prompt Large Language Models (LLMs) And Enhance Their Functionality","text":"can install development version tidyprompt GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"tjarkvandemerwe/tidyprompt\")"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Prompt Large Language Models (LLMs) And Enhance Their Functionality","text":"See ‘Getting started’ vignette introduction ‘tidyprompt’.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/index.html","id":"more-information-and-contributing","dir":"","previous_headings":"","what":"More information and contributing","title":"Prompt Large Language Models (LLMs) And Enhance Their Functionality","text":"‘tidyprompt’ active development Luka Koning (l.koning@kennispunttwente.nl) Tjark van de Merwe (t.vandemerwe@kennispunttwente.nl). Note stage, package yet fully stable architecture subject change. encounter issues, please open issue GitHub repository. welcome contribute package opening pull request. questions suggestions, can also reach us via e-mail.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/index.html","id":"a-note-on-text-based-versus-native-handling-of-llms","dir":"","previous_headings":"More information and contributing","what":"A note on ‘text-based’ versus ‘native’ handling of LLMs","title":"Prompt Large Language Models (LLMs) And Enhance Their Functionality","text":"‘tidyprompt’ primarily focused ‘text-based’ handling LLMs, textual output parsed achieve structured output functionalities. contrast ‘native’ handling, LLM directly controlled LLM provider provide output certain manner (instance, available tokens restricted match specific output format). latter may efficient, tends specific LLM providers, certain models, API structures. ‘text-based’ processing, ‘tidyprompt’ aims general suitable wider range LLM providers models. Nonetheless, ‘tidyprompt’ may also include support ‘native’ processing future.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Add text to a tidyprompt — add_text","title":"Add text to a tidyprompt — add_text","text":"Add text prompt adding prompt_wrap() append text current prompt text.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add text to a tidyprompt — add_text","text":"","code":"add_text(prompt, text, position = c(\"after\", \"before\"), sep = \"\\n\\n\")"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add text to a tidyprompt — add_text","text":"prompt single string tidyprompt() object text Text added current prompt text position add text; either \"\" \"\". sep Separator used current prompt text text added","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add text to a tidyprompt — add_text","text":"tidyprompt() added prompt_wrap() append text end current prompt text","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add text to a tidyprompt — add_text","text":"","code":"prompt <- \"Hi there!\" |>   add_text(\"How is your day?\") prompt #> <tidyprompt> #> The base prompt is modified by a prompt wrap, resulting in: #> > Hi there! #> >  #> > How is your day?  #> Use '<tidyprompt>$prompt_wraps' to show the prompt wraps. #> Use '<tidyprompt>$base_prompt' to show the base prompt text. #> Use '<tidyprompt> |> construct_prompt_text()' to get the full prompt text. #>  prompt |>   construct_prompt_text() #> [1] \"Hi there!\\n\\nHow is your day?\""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable R function calling for prompt evaluation by a LLM — add_tools","title":"Enable R function calling for prompt evaluation by a LLM — add_tools","text":"function adds ability LLM call R functions. Users can specify list functions LLM can call, prompt modified include information, well accompanying extraction function call functions (handled send_prompt()). Documentation functions extracted help file (available), documentation added add_tools_add_documentation().","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable R function calling for prompt evaluation by a LLM — add_tools","text":"","code":"add_tools(prompt, tool_functions = list())"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable R function calling for prompt evaluation by a LLM — add_tools","text":"prompt single string tidyprompt() object tool_functions R function list R functions LLM can call. function documented help file (e.g., part package), documentation parsed help file. custom function, documentation added add_tools_add_documentation()","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enable R function calling for prompt evaluation by a LLM — add_tools","text":"tidyprompt() added prompt_wrap() allow LLM call R functions","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enable R function calling for prompt evaluation by a LLM — add_tools","text":"Note method function calling purely text-based. makes suitable LLM LLM provider. However, 'native' function calling (LLM model provider restricts model special tokens can used call functions) may perform better terms accuracy efficiency. 'tidyprompt' may support 'native' function calling future","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enable R function calling for prompt evaluation by a LLM — add_tools","text":"","code":"# Example fake weather function to add to the prompt: temperature_in_location <- function(     location = c(\"Amsterdam\", \"Utrecht\", \"Enschede\"),     unit = c(\"Celcius\", \"Fahrenheit\") ) {   location <- match.arg(location)   unit <- match.arg(unit)    temperature_celcius <- switch(     location,     \"Amsterdam\" = 32.5,     \"Utrecht\" = 19.8,     \"Enschede\" = 22.7   )    if (unit == \"Celcius\") {     return(temperature_celcius)   } else {     return(temperature_celcius * 9/5 + 32)   } }  # Add documentation to a function: temperature_in_location <- add_tools_add_documentation(   temperature_in_location,   description = \"Get the temperature in a location\",   arguments = list(     location = \"Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'\",     unit = \"Unit, must be one of: 'Celcius', 'Fahrenheit'\"   ),   return_value = \"The temperature in the specified location and unit\" )  # Attempt to extract documentation as it is extracted by add_tools(): add_tools_get_documentation(temperature_in_location) #> $name #> [1] \"temperature_in_location\" #>  #> $description #> [1] \"Get the temperature in a location\" #>  #> $arguments #> $arguments$location #> [1] \"Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'\" #>  #> $arguments$unit #> [1] \"Unit, must be one of: 'Celcius', 'Fahrenheit'\" #>  #>  #> $return_value #> [1] \"The temperature in the specified location and unit\" #>   # You can also pass functions which are included in packages; #   documentation is then extracted from help files #   (so you don't need to manually add documentation): add_tools_get_documentation(list.files) #> $name #> [1] \"list.files\" #>  #> $description #> [1] \"List the Files in a Directory/Folder: These functions produce a character vector of the names of files\\nor directories in the named directory.\" #>  #> $arguments #> $arguments$path #> [1] \"a character vector of full path names; the default corresponds to the working directory, ‘getwd()’.  Tilde expansion (see ‘path.expand’) is performed.  Missing values will be ignored.  Elements with a marked encoding will be converted to the native encoding (and if that fails, considered non-existent).\" #>  #> $arguments$pattern #> [1] \"an optional regular expression.  Only file names which match the regular expression will be returned.\" #>  #> $arguments$all.files #> [1] \"a logical value.  If ‘FALSE’, only the names of visible files are returned (following Unix-style visibility, that is files whose name does not start with a dot).  If ‘TRUE’, all file names will be returned.\" #>  #> $arguments$full.names #> [1] \"a logical value.  If ‘TRUE’, the directory path is prepended to the file names to give a relative file path.  If ‘FALSE’, the file names (rather than paths) are returned.\" #>  #> $arguments$recursive #> [1] \"logical.  Should the listing recurse into directories?\" #>  #> $arguments$ignore.case #> [1] \"logical.  Should pattern-matching be case-insensitive?\" #>  #> $arguments$include.dirs #> [1] \"logical.  Should subdirectory names be included in recursive listings?  (They always are in non-recursive ones).\" #>  #> $arguments$no.. #> [1] \"logical.  Should both ‘\\\".\\\"’ and ‘\\\"..\\\"’ be excluded also from non-recursive listings?\" #>  #>  #> $return_value #> [1] \"A character vector containing the names of the files in the\\nspecified directories (empty if there were no files).  If a path\\ndoes not exist or is not a directory or is unreadable it is\\nskipped.\\nThe files are sorted in alphabetical order, on the full path if\\n‘full.names = TRUE’.\\n‘list.dirs’ implicitly has ‘all.files = TRUE’, and if ‘recursive =\\nTRUE’, the answer includes ‘path’ itself (provided it is a\\nreadable directory).\\n‘dir’ is an alias for ‘list.files’.\" #>   # Example usage: prompt1 <- \"Hi, what is the weather in Enschede? Give me Celcius degrees\" |>   add_tools(temperature_in_location)  prompt2 <- \"What are the files in my current directory?\" |>   add_tools(list.files)  if (FALSE) { # \\dontrun{   prompt1 |>     send_prompt(llm_provider_ollama())   #   --- Sending request to LLM provider (llama3.1:8b): ---   #     Hi, what is the weather in Enschede? Give me Celcius degrees   #   #     If you need more information, you can call functions to help you.   #     To call a function, output a JSON object with the following format:   #   #       {   #         \"function\": \"<function name>\",   #         \"arguments\": {   #           \"<argument_name>\": <argument_value>,   #           ...   #         }   #       }   #   #     (Note: you cannot call other functions within arguments.)   #   #     The following functions are available:   #   #       function name: temperature_in_location   #     description: Get the temperature in a location   #     arguments:   #       - location: Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'   #     - unit: Unit, must be one of: 'Celcius', 'Fahrenheit'   #     return value: The temperature in the specified location and unit   #   #     After you call a function, wait until you receive more information.   #     Use the information to decide your next steps or provide a final response.   #   --- Receiving response from LLM provider: ---   #     To get the weather in Enschede, I'll need to call the   #     `temperature_in_location` function.   #   #   Here's my JSON object:   #   ```   #     {   #       \"function\": \"temperature_in_location\",   #       \"arguments\": {   #         \"location\": \"Enschede\",   #         \"unit\": \"Celcius\"   #       }   #     }   #   ```   #   #   I'll wait for your response...   # --- Sending request to LLM provider (llama3.1:8b): ---   #   function called: temperature_in_location   #   arguments used: location = Enschede, unit = Celcius   #   result: 22.7   # --- Receiving response from LLM provider: ---   #   The current temperature in Enschede is 22.7°C.   #   #   So, the final answer is:   #   **22.7°C**   #   #   Is there anything else I can help you with?   # [1] \"The current temperature in Enschede is 22.7°C.\\n\\nSo, the final answer   # is:\\n**22.7°C**\\n\\nIs there anything else I can help you with?\"    prompt2 |>     send_prompt(llm_provider_ollama())   # ... } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_add_documentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add tidyprompt function documentation to a function — add_tools_add_documentation","title":"Add tidyprompt function documentation to a function — add_tools_add_documentation","text":"function adds documentation custom function. documentation used extract information function's name, description, arguments, return value. information used provide LLM information functions, LLM can call R functions. intended use function add documentation custom functions help files; add_tools_get_documentation() extract documentation help files available.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_add_documentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add tidyprompt function documentation to a function — add_tools_add_documentation","text":"","code":"add_tools_add_documentation(   func,   description,   arguments = list(),   return_value,   name = NULL )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_add_documentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add tidyprompt function documentation to a function — add_tools_add_documentation","text":"func function object description description function arguments named list arguments (arguments) descriptions return_value description return value name name function (optional). provided, function name extracted function object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_add_documentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add tidyprompt function documentation to a function — add_tools_add_documentation","text":"function object documentation added attribute","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_add_documentation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add tidyprompt function documentation to a function — add_tools_add_documentation","text":"function already documentation, overwritten documentation provided function (terms extraction add_tools_get_documentation()). Thus, possible override help file documentation adding custom documentation","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_add_documentation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add tidyprompt function documentation to a function — add_tools_add_documentation","text":"","code":"# Example fake weather function to add to the prompt: temperature_in_location <- function(     location = c(\"Amsterdam\", \"Utrecht\", \"Enschede\"),     unit = c(\"Celcius\", \"Fahrenheit\") ) {   location <- match.arg(location)   unit <- match.arg(unit)    temperature_celcius <- switch(     location,     \"Amsterdam\" = 32.5,     \"Utrecht\" = 19.8,     \"Enschede\" = 22.7   )    if (unit == \"Celcius\") {     return(temperature_celcius)   } else {     return(temperature_celcius * 9/5 + 32)   } }  # Add documentation to a function: temperature_in_location <- add_tools_add_documentation(   temperature_in_location,   description = \"Get the temperature in a location\",   arguments = list(     location = \"Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'\",     unit = \"Unit, must be one of: 'Celcius', 'Fahrenheit'\"   ),   return_value = \"The temperature in the specified location and unit\" )  # Attempt to extract documentation as it is extracted by add_tools(): add_tools_get_documentation(temperature_in_location) #> $name #> [1] \"temperature_in_location\" #>  #> $description #> [1] \"Get the temperature in a location\" #>  #> $arguments #> $arguments$location #> [1] \"Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'\" #>  #> $arguments$unit #> [1] \"Unit, must be one of: 'Celcius', 'Fahrenheit'\" #>  #>  #> $return_value #> [1] \"The temperature in the specified location and unit\" #>   # You can also pass functions which are included in packages; #   documentation is then extracted from help files #   (so you don't need to manually add documentation): add_tools_get_documentation(list.files) #> $name #> [1] \"list.files\" #>  #> $description #> [1] \"List the Files in a Directory/Folder: These functions produce a character vector of the names of files\\nor directories in the named directory.\" #>  #> $arguments #> $arguments$path #> [1] \"a character vector of full path names; the default corresponds to the working directory, ‘getwd()’.  Tilde expansion (see ‘path.expand’) is performed.  Missing values will be ignored.  Elements with a marked encoding will be converted to the native encoding (and if that fails, considered non-existent).\" #>  #> $arguments$pattern #> [1] \"an optional regular expression.  Only file names which match the regular expression will be returned.\" #>  #> $arguments$all.files #> [1] \"a logical value.  If ‘FALSE’, only the names of visible files are returned (following Unix-style visibility, that is files whose name does not start with a dot).  If ‘TRUE’, all file names will be returned.\" #>  #> $arguments$full.names #> [1] \"a logical value.  If ‘TRUE’, the directory path is prepended to the file names to give a relative file path.  If ‘FALSE’, the file names (rather than paths) are returned.\" #>  #> $arguments$recursive #> [1] \"logical.  Should the listing recurse into directories?\" #>  #> $arguments$ignore.case #> [1] \"logical.  Should pattern-matching be case-insensitive?\" #>  #> $arguments$include.dirs #> [1] \"logical.  Should subdirectory names be included in recursive listings?  (They always are in non-recursive ones).\" #>  #> $arguments$no.. #> [1] \"logical.  Should both ‘\\\".\\\"’ and ‘\\\"..\\\"’ be excluded also from non-recursive listings?\" #>  #>  #> $return_value #> [1] \"A character vector containing the names of the files in the\\nspecified directories (empty if there were no files).  If a path\\ndoes not exist or is not a directory or is unreadable it is\\nskipped.\\nThe files are sorted in alphabetical order, on the full path if\\n‘full.names = TRUE’.\\n‘list.dirs’ implicitly has ‘all.files = TRUE’, and if ‘recursive =\\nTRUE’, the answer includes ‘path’ itself (provided it is a\\nreadable directory).\\n‘dir’ is an alias for ‘list.files’.\" #>   # Example usage: prompt1 <- \"Hi, what is the weather in Enschede? Give me Celcius degrees\" |>   add_tools(temperature_in_location)  prompt2 <- \"What are the files in my current directory?\" |>   add_tools(list.files)  if (FALSE) { # \\dontrun{   prompt1 |>     send_prompt(llm_provider_ollama())   #   --- Sending request to LLM provider (llama3.1:8b): ---   #     Hi, what is the weather in Enschede? Give me Celcius degrees   #   #     If you need more information, you can call functions to help you.   #     To call a function, output a JSON object with the following format:   #   #       {   #         \"function\": \"<function name>\",   #         \"arguments\": {   #           \"<argument_name>\": <argument_value>,   #           ...   #         }   #       }   #   #     (Note: you cannot call other functions within arguments.)   #   #     The following functions are available:   #   #       function name: temperature_in_location   #     description: Get the temperature in a location   #     arguments:   #       - location: Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'   #     - unit: Unit, must be one of: 'Celcius', 'Fahrenheit'   #     return value: The temperature in the specified location and unit   #   #     After you call a function, wait until you receive more information.   #     Use the information to decide your next steps or provide a final response.   #   --- Receiving response from LLM provider: ---   #     To get the weather in Enschede, I'll need to call the   #     `temperature_in_location` function.   #   #   Here's my JSON object:   #   ```   #     {   #       \"function\": \"temperature_in_location\",   #       \"arguments\": {   #         \"location\": \"Enschede\",   #         \"unit\": \"Celcius\"   #       }   #     }   #   ```   #   #   I'll wait for your response...   # --- Sending request to LLM provider (llama3.1:8b): ---   #   function called: temperature_in_location   #   arguments used: location = Enschede, unit = Celcius   #   result: 22.7   # --- Receiving response from LLM provider: ---   #   The current temperature in Enschede is 22.7°C.   #   #   So, the final answer is:   #   **22.7°C**   #   #   Is there anything else I can help you with?   # [1] \"The current temperature in Enschede is 22.7°C.\\n\\nSo, the final answer   # is:\\n**22.7°C**\\n\\nIs there anything else I can help you with?\"    prompt2 |>     send_prompt(llm_provider_ollama())   # ... } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_get_documentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract documentation from a function — add_tools_get_documentation","title":"Extract documentation from a function — add_tools_get_documentation","text":"function extracts documentation help file (available, .e., function part package) documentation added add_tools_add_documentation(). extracted documentation includes function's name, description, arguments, return value. information used provide LLM information functions, LLM can call R functions.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_get_documentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract documentation from a function — add_tools_get_documentation","text":"","code":"add_tools_get_documentation(func, name = NULL)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_get_documentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract documentation from a function — add_tools_get_documentation","text":"func function object. function belong package documentation available help file, documentation added add_tools_add_documentation() name name function already known (optional). provided extracted documentation function object's name","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_get_documentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract documentation from a function — add_tools_get_documentation","text":"list following elements: name: name function description: description function arguments: named list arguments descriptions return_value: description return value","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_get_documentation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract documentation from a function — add_tools_get_documentation","text":"function prioritize documentation added add_tools_add_documentation() documentation help file. Thus, possible override help file documentation adding custom documentation","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/add_tools_get_documentation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract documentation from a function — add_tools_get_documentation","text":"","code":"# Example fake weather function to add to the prompt: temperature_in_location <- function(     location = c(\"Amsterdam\", \"Utrecht\", \"Enschede\"),     unit = c(\"Celcius\", \"Fahrenheit\") ) {   location <- match.arg(location)   unit <- match.arg(unit)    temperature_celcius <- switch(     location,     \"Amsterdam\" = 32.5,     \"Utrecht\" = 19.8,     \"Enschede\" = 22.7   )    if (unit == \"Celcius\") {     return(temperature_celcius)   } else {     return(temperature_celcius * 9/5 + 32)   } }  # Add documentation to a function: temperature_in_location <- add_tools_add_documentation(   temperature_in_location,   description = \"Get the temperature in a location\",   arguments = list(     location = \"Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'\",     unit = \"Unit, must be one of: 'Celcius', 'Fahrenheit'\"   ),   return_value = \"The temperature in the specified location and unit\" )  # Attempt to extract documentation as it is extracted by add_tools(): add_tools_get_documentation(temperature_in_location) #> $name #> [1] \"temperature_in_location\" #>  #> $description #> [1] \"Get the temperature in a location\" #>  #> $arguments #> $arguments$location #> [1] \"Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'\" #>  #> $arguments$unit #> [1] \"Unit, must be one of: 'Celcius', 'Fahrenheit'\" #>  #>  #> $return_value #> [1] \"The temperature in the specified location and unit\" #>   # You can also pass functions which are included in packages; #   documentation is then extracted from help files #   (so you don't need to manually add documentation): add_tools_get_documentation(list.files) #> $name #> [1] \"list.files\" #>  #> $description #> [1] \"List the Files in a Directory/Folder: These functions produce a character vector of the names of files\\nor directories in the named directory.\" #>  #> $arguments #> $arguments$path #> [1] \"a character vector of full path names; the default corresponds to the working directory, ‘getwd()’.  Tilde expansion (see ‘path.expand’) is performed.  Missing values will be ignored.  Elements with a marked encoding will be converted to the native encoding (and if that fails, considered non-existent).\" #>  #> $arguments$pattern #> [1] \"an optional regular expression.  Only file names which match the regular expression will be returned.\" #>  #> $arguments$all.files #> [1] \"a logical value.  If ‘FALSE’, only the names of visible files are returned (following Unix-style visibility, that is files whose name does not start with a dot).  If ‘TRUE’, all file names will be returned.\" #>  #> $arguments$full.names #> [1] \"a logical value.  If ‘TRUE’, the directory path is prepended to the file names to give a relative file path.  If ‘FALSE’, the file names (rather than paths) are returned.\" #>  #> $arguments$recursive #> [1] \"logical.  Should the listing recurse into directories?\" #>  #> $arguments$ignore.case #> [1] \"logical.  Should pattern-matching be case-insensitive?\" #>  #> $arguments$include.dirs #> [1] \"logical.  Should subdirectory names be included in recursive listings?  (They always are in non-recursive ones).\" #>  #> $arguments$no.. #> [1] \"logical.  Should both ‘\\\".\\\"’ and ‘\\\"..\\\"’ be excluded also from non-recursive listings?\" #>  #>  #> $return_value #> [1] \"A character vector containing the names of the files in the\\nspecified directories (empty if there were no files).  If a path\\ndoes not exist or is not a directory or is unreadable it is\\nskipped.\\nThe files are sorted in alphabetical order, on the full path if\\n‘full.names = TRUE’.\\n‘list.dirs’ implicitly has ‘all.files = TRUE’, and if ‘recursive =\\nTRUE’, the answer includes ‘path’ itself (provided it is a\\nreadable directory).\\n‘dir’ is an alias for ‘list.files’.\" #>   # Example usage: prompt1 <- \"Hi, what is the weather in Enschede? Give me Celcius degrees\" |>   add_tools(temperature_in_location)  prompt2 <- \"What are the files in my current directory?\" |>   add_tools(list.files)  if (FALSE) { # \\dontrun{   prompt1 |>     send_prompt(llm_provider_ollama())   #   --- Sending request to LLM provider (llama3.1:8b): ---   #     Hi, what is the weather in Enschede? Give me Celcius degrees   #   #     If you need more information, you can call functions to help you.   #     To call a function, output a JSON object with the following format:   #   #       {   #         \"function\": \"<function name>\",   #         \"arguments\": {   #           \"<argument_name>\": <argument_value>,   #           ...   #         }   #       }   #   #     (Note: you cannot call other functions within arguments.)   #   #     The following functions are available:   #   #       function name: temperature_in_location   #     description: Get the temperature in a location   #     arguments:   #       - location: Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'   #     - unit: Unit, must be one of: 'Celcius', 'Fahrenheit'   #     return value: The temperature in the specified location and unit   #   #     After you call a function, wait until you receive more information.   #     Use the information to decide your next steps or provide a final response.   #   --- Receiving response from LLM provider: ---   #     To get the weather in Enschede, I'll need to call the   #     `temperature_in_location` function.   #   #   Here's my JSON object:   #   ```   #     {   #       \"function\": \"temperature_in_location\",   #       \"arguments\": {   #         \"location\": \"Enschede\",   #         \"unit\": \"Celcius\"   #       }   #     }   #   ```   #   #   I'll wait for your response...   # --- Sending request to LLM provider (llama3.1:8b): ---   #   function called: temperature_in_location   #   arguments used: location = Enschede, unit = Celcius   #   result: 22.7   # --- Receiving response from LLM provider: ---   #   The current temperature in Enschede is 22.7°C.   #   #   So, the final answer is:   #   **22.7°C**   #   #   Is there anything else I can help you with?   # [1] \"The current temperature in Enschede is 22.7°C.\\n\\nSo, the final answer   # is:\\n**22.7°C**\\n\\nIs there anything else I can help you with?\"    prompt2 |>     send_prompt(llm_provider_ollama())   # ... } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_boolean.html","id":null,"dir":"Reference","previous_headings":"","what":"Make LLM answer as a boolean (TRUE or FALSE) — answer_as_boolean","title":"Make LLM answer as a boolean (TRUE or FALSE) — answer_as_boolean","text":"Make LLM answer boolean (TRUE FALSE)","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_boolean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make LLM answer as a boolean (TRUE or FALSE) — answer_as_boolean","text":"","code":"answer_as_boolean(   prompt,   true_definition = NULL,   false_definition = NULL,   add_instruction_to_prompt = TRUE )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_boolean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make LLM answer as a boolean (TRUE or FALSE) — answer_as_boolean","text":"prompt single string tidyprompt() object true_definition (optional) Definition constitute TRUE. included instruction LLM. single string false_definition (optional) Definition constitute FALSE. included instruction LLM. single string add_instruction_to_prompt (optional) Add instruction replying boolean prompt text. Set FALSE debugging extractions/validations working expected (without instruction answer fail validation function, initiating retry)","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_boolean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make LLM answer as a boolean (TRUE or FALSE) — answer_as_boolean","text":"tidyprompt() added prompt_wrap() ensure LLM response boolean","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_boolean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make LLM answer as a boolean (TRUE or FALSE) — answer_as_boolean","text":"","code":"if (FALSE) { # \\dontrun{   \"Are you a large language model?\" |>     answer_as_boolean() |>     send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   Are you a large language model?   #   #   You must answer with only TRUE or FALSE (use no other characters).   # --- Receiving response from LLM provider: ---   #   TRUE   # [1] TRUE } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Instruct LLM to answer a prompt with R code — answer_as_code","title":"Instruct LLM to answer a prompt with R code — answer_as_code","text":"function adds prompt wrap tidyprompt() instructs LLM answer prompt R code. various options customize behavior prompt wrap, concerning evaluation R code, packages may used, objects already exist R session, console output sent back LLM.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Instruct LLM to answer a prompt with R code — answer_as_code","text":"","code":"answer_as_code(   prompt,   add_text = \"You must code in the programming language 'R' to answer this prompt.\",   pkgs_to_use = c(),   objects_to_use = list(),   list_packages = TRUE,   list_objects = TRUE,   skim_dataframes = TRUE,   evaluate_code = FALSE,   r_session_options = list(),   output_as_tool = FALSE,   return_mode = c(\"full\", \"code\", \"console\", \"object\", \"formatted_output\", \"llm_answer\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Instruct LLM to answer a prompt with R code — answer_as_code","text":"prompt single string tidyprompt() object add_text Single string added current prompt text, informing LLM must code R answer prompt pkgs_to_use character vector package names may used R code LLM generate. evaluating R code, packages pre-loaded R session objects_to_use named list objects may used R code LLM generate. evaluating R code, objects pre-loaded R session. names list used object names R session list_packages Logical indicating whether LLM informed packages may used R code (TRUE, list loaded packages shown initial prompt) list_objects Logical indicating whether LLM informed existence 'objects_to_use' (TRUE, list objects plus types shown initial prompt) skim_dataframes Logical indicating whether LLM informed structure dataframes present 'objects_to_use' (TRUE, skim summary data.frame type object shown initial prompt). uses function skim_with_labels_and_levels() evaluate_code Logical indicating whether R code evaluated. TRUE, R code evaluated separate R session (using 'callr' create isolated R session via r_session). Note setting 'TRUE' means code generated LLM run system; use setting caution r_session_options list options pass r_session. can used customize R session. See r_session_options available options. options provided, default options used 'system_profile' 'user_profile' set FALSE output_as_tool Logical indicating whether console output evaluated R code sent back LLM, meaning LLM use R code tool formulate answer prompt. TRUE, LLM can decide can answer prompt output, need modify R code. LLM provide new R code (.e., prompt answered) prompt wrap end (continue long LLM provides R code). option enabled, resulting prompt_wrap() type 'tool'. TRUE, return mode also always set 'llm_answer' return_mode Single string indicating return mode. One 'full', 'code', 'console', 'object', 'formatted_output', 'llm_answer'. 'full', function return list original LLM answer, extracted R code, (evaluated) output R code. 'code', function return extracted R code. 'console', function return console output evaluated R code. 'object', function return object produced evaluated R code. 'formatted_output', function return formatted string extracted R code, console output, print last object (identical presented LLM 'output_as_tool' TRUE). 'llm_answer', function return original LLM answer. choosing 'console' 'object', additional instruction added prompt text inform LLM expected output R code.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Instruct LLM to answer a prompt with R code — answer_as_code","text":"tidyprompt() object prompt_wrap() added , handle R code generation possibly evaluation","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Instruct LLM to answer a prompt with R code — answer_as_code","text":"evaluation R code, 'callr' package required. Please note: automatic evaluation generated R code may dangerous system; must use function caution.","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Instruct LLM to answer a prompt with R code — answer_as_code","text":"","code":"if (FALSE) { # \\dontrun{   # Prompt to plot object in R   plot <- paste0(     \"Create a scatter plot of miles per gallon (mpg) versus\",     \" horsepower (hp) for the cars in the mtcars dataset.\",     \" Use different colors to represent the number of cylinders (cyl).\",     \" Be very creative and make the plot look nice but also a little crazy!\"   ) |>     answer_as_code(       pkgs_to_use = c(\"ggplot2\"),       objects_to_use = list(\"mtcars\" = mtcars),       evaluate_code = TRUE,       return_mode = \"object\"     ) |>     send_prompt(llm_provider_openai())   plot    # Prompt to value calculated with R   avg_miles_per_gallon <- paste0(     \"Using the mtcars dataset,\",     \" calculate the average miles per gallon (mpg) for cars with 6 cylinders.\"   ) |>     answer_as_integer() |>     answer_as_code(       pkgs_to_use = c(\"dplyr\"),       objects_to_use = list(\"mtcars\" = mtcars),       evaluate_code = TRUE,       output_as_tool = TRUE     ) |>     answer_by_chain_of_thought() |>     send_prompt(llm_provider_ollama())   avg_miles_per_gallon } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Make LLM answer as an integer (between min and max) — answer_as_integer","title":"Make LLM answer as an integer (between min and max) — answer_as_integer","text":"Make LLM answer integer (min max)","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make LLM answer as an integer (between min and max) — answer_as_integer","text":"","code":"answer_as_integer(   prompt,   min = NULL,   max = NULL,   add_instruction_to_prompt = TRUE )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make LLM answer as an integer (between min and max) — answer_as_integer","text":"prompt single string tidyprompt() object min (optional) Minimum value integer max (optional) Maximum value integer add_instruction_to_prompt (optional) Add instruction replying integer prompt text. Set FALSE debugging extractions/validations working expected (without instruction answer fail validation function, initiating retry)","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make LLM answer as an integer (between min and max) — answer_as_integer","text":"tidyprompt() added prompt_wrap() ensure LLM response integer.","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make LLM answer as an integer (between min and max) — answer_as_integer","text":"","code":"if (FALSE) { # \\dontrun{   \"What is 5 + 5?\" |>     answer_as_integer() |>     send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   What is 5 + 5?   #   #   You must answer with only an integer (use no other characters).   # --- Receiving response from LLM provider: ---   #   10   # [1] 10 } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Make LLM answer as a list of items — answer_as_list","title":"Make LLM answer as a list of items — answer_as_list","text":"Make LLM answer list items","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make LLM answer as a list of items — answer_as_list","text":"","code":"answer_as_list(   prompt,   item_name = \"item\",   item_explanation = NULL,   n_unique_items = NULL,   list_mode = c(\"bullet\", \"comma\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make LLM answer as a list of items — answer_as_list","text":"prompt single string tidyprompt() object item_name (optional) Name items list item_explanation (optional) Additional explanation item . Item explanation single string. appended list instruction n_unique_items (optional) Number unique items required list list_mode (optional) Mode list. Either \"bullet\" \"comma\". \"bullet mode expects items listed \"–\" item, new line item (e.g., \"– item1\\n– item2\\n– item3\"). \"comma\" mode expects items listed number period (e.g., \"1. item1, 2. item2, 3. item3\"). \"comma\" mode may easier smaller LLMs use","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make LLM answer as a list of items — answer_as_list","text":"tidyprompt() added prompt_wrap() ensure LLM response list items","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make LLM answer as a list of items — answer_as_list","text":"","code":"if (FALSE) { # \\dontrun{   \"What are some delicious fruits?\" |>     answer_as_list(item_name = \"fruit\", n_unique_items = 5) |>     send_prompt(llm_provider_ollama())  #   --- Sending request to LLM provider (llama3.1:8b): --- #   What are some delicious fruits? # #   Respond with a list, like so: #     -- <<fruit 1>> #     -- <<fruit 2>> #     etc. #   The list should contain 5 unique items. #   --- Receiving response from LLM provider: --- #   Here's the list of delicious fruits: # #     -- Strawberries #     -- Pineapples #     -- Mangoes #     -- Blueberries #     -- Pomegranates # [[1]] # [1] \"Strawberries\" # # [[2]] # [1] \"Pineapples\" # # [[3]] # [1] \"Mangoes\" # # [[4]] # [1] \"Blueberries\" # # [[5]] # [1] \"Pomegranates\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_named_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract named list from LLM response with optional item instructions and validations — answer_as_named_list","title":"Extract named list from LLM response with optional item instructions and validations — answer_as_named_list","text":"Extract named list LLM response optional item instructions validations","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_named_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract named list from LLM response with optional item instructions and validations — answer_as_named_list","text":"","code":"answer_as_named_list(   prompt,   item_names,   item_instructions = NULL,   item_validations = NULL )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_named_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract named list from LLM response with optional item instructions and validations — answer_as_named_list","text":"prompt single string tidyprompt() object item_names character vector specifying expected item names item_instructions optional named list additional instructions item item_validations optional named list validation functions item. Like validation functions prompt_wrap(), functions return llm_feedback() validation fails. validation successful, function return TRUE","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_named_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract named list from LLM response with optional item instructions and validations — answer_as_named_list","text":"tidyprompt() added prompt_wrap() ensures LLM response named list specified item names, optional instructions, validations.","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_named_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract named list from LLM response with optional item instructions and validations — answer_as_named_list","text":"","code":"if (FALSE) { # \\dontrun{   persona <- \"Create a persona for me, please.\" |>     answer_as_named_list(       item_names = c(\"name\", \"age\", \"occupation\"),       item_instructions = list(         name = \"The name of the persona\",         age = \"The age of the persona\",         occupation = \"The occupation of the persona\"       )     ) |> send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   Create a persona for me, please.   #   #   Respond with a named list like so:   #     -- name: <<value>> (The name of the persona)   #     -- age: <<value>> (The age of the persona)   #     -- occupation: <<value>> (The occupation of the persona)   #   Each name must correspond to: name, age, occupation   # --- Receiving response from LLM provider: ---   #   Here is your persona:   #   #   -- name: Astrid Welles   #   -- age: 32   #   -- occupation: Museum Curator   persona$name   # [1] \"Astrid Welles\"   persona$age   # [1] \"32\"   persona$occupation   # [1] \"Museum Curator\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Make LLM answer match a specific regex — answer_as_regex","title":"Make LLM answer match a specific regex — answer_as_regex","text":"Make LLM answer match specific regex","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make LLM answer match a specific regex — answer_as_regex","text":"","code":"answer_as_regex(prompt, regex, mode = c(\"full_match\", \"extract_matches\"))"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make LLM answer match a specific regex — answer_as_regex","text":"prompt single string tidyprompt() object regex character string specifying regular expression response must match mode character string specifying mode regex match. Options \"exact_match\" (default) \"extract_all_matches\". \"full_match\", full LLM response must match regex. , LLM sent feedback retry. full LLM response returned regex matched. \"extract_matches\", matches regex LLM response returned (present). regex matched , LLM sent feedback retry. least one match, matches returned character vector","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make LLM answer match a specific regex — answer_as_regex","text":"tidyprompt() added prompt_wrap() ensure LLM response matches specified regex","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_as_regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make LLM answer match a specific regex — answer_as_regex","text":"","code":"if (FALSE) { # \\dontrun{   \"What would be a suitable e-mail address for cupcake company?\" |>     answer_as_regex(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\") |>     send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   What would be a suitable e-mail address for cupcake company?   #   #   You must answer with a response that matches this regex format:   #     ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$   #     (use no other characters)   # --- Receiving response from LLM provider: ---   #   sweet.treats.cupcakes@gmail.com   # [1] \"sweet.treats.cupcakes@gmail.com\"    \"What would be a suitable e-mail address for cupcake company?\" |>     add_text(\"Give three ideas.\") |>     answer_as_regex(       \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\",       mode = \"extract_matches\"     ) |>     send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   What would be a suitable e-mail address for cupcake company?   #   #   Give three ideas.   #   #   You must answer with a response that matches this regex format:   #     [a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}   # --- Receiving response from LLM provider: ---   #   Here are three potential email addresses for a cupcake company:   #   #   1. sweettreats.cupcakes@yummail.com   #   2. cupcakes.and.love@flourpower.net   #   3. thecupcakery@gmail.com   # [1] \"sweettreats.cupcakes@yummail.com\" \"cupcakes.and.love@flourpower.net\"   # \"thecupcakery@gmail.com\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":null,"dir":"Reference","previous_headings":"","what":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"function enables chain thought mode evaluation prompt tidyprompt(). chain thought mode, large language model (LLM) chain thought mode, large language model (LLM) asked think step step arrive final answer. hypothesized may increase LLM performance solving complex tasks. Chain thought mode inspired method described Wei et al. (2022).","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"","code":"answer_by_chain_of_thought(   prompt,   extract_from_finish_brackets = TRUE,   extraction_lenience = TRUE )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"prompt single string tidyprompt() object extract_from_finish_brackets logical indicating whether final answer extracted text inside \"FINISH...\" brackets. extraction_lenience logical indcating whether extraction function lenient. TRUE, extraction function attempt extract final answer even extracted within brackets, extracting everything final occurence 'FINISH' (present). may useful smaller LLMs may follow output format strictly","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"tidyprompt() added prompt_wrap() ensure LLM follows chain thought mode answering prompt","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"Wei, J., Wang, X., Schuurmans, D., Bosma, M., Ichter, B., Xia, F., Chi, E., Le, Q., & Zhou, D. (2022). Chain--Thought Prompting Elicits Reasoning Large Language Models. doi:10.48550/arXiv.2201.11903","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"","code":"if (FALSE) { # \\dontrun{   \"What is 5 + 5?\" |>     answer_by_chain_of_thought() |>     answer_as_integer() |>     send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   You are given a user's prompt.   #   To answer the user's prompt, you need to think step by step to arrive at a final answer.   #   #   ----- START OF USER'S PROMPT -----   #   What is 5 + 5?   #   #   You must answer with only an integer (use no other characters).   #   ----- END OF USER'S PROMPT -----   #   #   What are the steps you would take to answer the user's prompt?   #   Describe your thought process in the following format:   #     >> step 1: <step 1 description>   #     >> step 2: <step 2 description>   #     (etc.)   #   #   When you are done, you must type:   #     FINISH[<put here your final answer to the user's prompt>]   #   #   Make sure your final answer follows the logical conclusion of your thought process.   # --- Receiving response from LLM provider: ---   #   >> step 1: Recognize that the user's prompt is a simple arithmetic question asking for   #   the sum of two numbers.   #   #   >> step 2: Identify the specific numbers mentioned in the prompt, which are 5 and 5.   #   #   >> step 3: Recall basic addition facts from memory or knowledge.   #   In this case, knowing that 5 + 0 = 5, 5 + 1 = 6, 5 + 2 = 7, and so on up to 5 + 4 = 9,   #   it is clear that the next step in adding 5 to itself would be to keep the same sum.   #   #   >> step 4: Apply the addition principle by considering the original number (5) as being   #   added to itself once more. Since 5 + 1 = 6 and the process of adding 1 increases the total   #   sum, then 5 + 2 must equal 7, thus indicating a direct progression in the sum as the additive   #   amount increases.   #   #   >> step 5: From steps 3 and 4, conclude that since 5 added to itself (once) would be 10,   #   then when it is added again (to itself), it would continue from the last result which was   #   achieved by adding one more than the original number. Therefore, it must follow the pattern   #   established in step 3 where each additional amount increases the total sum.   #   #   >> step 6: Now knowing that the operation of adding a second 5 to the first one results in   #   increasing the sum to the next integer after 10 (based on steps 3 and 4), determine what the   #   next integer is after 10. Knowing that integers are whole numbers without fractions, it's   #   clear that if you add another unit to 10, it becomes 11.   #   #   FINISH[10]   # [1] 10 } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_react.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ReAct mode for a prompt — answer_by_react","title":"Set ReAct mode for a prompt — answer_by_react","text":"function enables ReAct mode evaluation prompt tidyprompt(). ReAct mode, large language model (LLM) asked think step step, time detailing thought, action, observation, eventually arrive final answer. hypothesized may increase LLM performance solving complex tasks. ReAct mode inspired method described Yao et al. (2022).","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_react.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ReAct mode for a prompt — answer_by_react","text":"","code":"answer_by_react(   prompt,   extract_from_finish_brackets = TRUE,   extraction_lenience = TRUE )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_react.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ReAct mode for a prompt — answer_by_react","text":"prompt single string tidyprompt() object extract_from_finish_brackets logical indicating whether final answer extracted text inside \"FINISH...\" brackets extraction_lenience logical indcating whether extraction function lenient. TRUE, extraction function attempt extract final answer even extracted within brackets, extracting everything final occurence 'FINISH' (present). may useful smaller LLMs may follow output format strictly","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_react.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ReAct mode for a prompt — answer_by_react","text":"tidyprompt() added prompt_wrap() ensure LLM follows ReAct mode answering prompt","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_react.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set ReAct mode for a prompt — answer_by_react","text":"Please note ReAct mode may useful combination tools LLM can use. See, example, 'add_tools()' enabling R function calling, , example, 'answer_as_code()' 'output_as_tool = TRUE' enabling R code evaluation tool.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_react.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set ReAct mode for a prompt — answer_by_react","text":"Yao, S., Wu, Y., Cheung, W., Wang, Z., Narasimhan, K., & Kong, L. (2022). ReAct: Synergizing Reasoning Acting Language Models. doi:10.48550/arXiv.2210.03629","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/answer_by_react.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ReAct mode for a prompt — answer_by_react","text":"","code":"if (FALSE) { # \\dontrun{   \"What is 5 + 5?\" |>     answer_by_react() |>     answer_as_integer() |>     send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   You are given a user's prompt.   #   To answer the user's prompt, you need to think step by step,   #   take an action if needed, and then return a final answer.   #   #   ----- START OF USER'S PROMPT -----   #   What is 5 + 5?   #   #   You must answer with only an integer (use no other characters).   #   ----- END OF USER'S PROMPT -----   #   #   Use the following structure:   #     Thought: <describe your thought process>   #     Action: <if needed, describe the action you take (e.g., look up information)>   #     Observation: <describe the result or observation from the action>   #   (Repeat Thought -> Action -> Observation as necessary)   #   #   When you are done, you must type:   #   FINISH[<put here your final answer to the user's prompt>]   #   #   Ensure your final answer aligns with your reasoning and observations.   # --- Receiving response from LLM provider: ---   #   Thought: The problem is asking for the sum of two numbers, 5 and 5.   #   #   Action: None needed, as this is a simple arithmetic operation that can be performed mentally.   #   #   Observation: I can easily add these two numbers together in my mind to get the result.   #   #   Thought: To find the sum, I will simply add the two numbers together: 5 + 5 = ?   #   #   Action: Perform the addition.   #   #   Observation: The result of adding 5 and 5 is 10.   #   #   FINISH[10]   # [1] 10 } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for chat_history() when the input is a single string — chat_history.character","title":"Method for chat_history() when the input is a single string — chat_history.character","text":"Creates chat_history object single string.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for chat_history() when the input is a single string — chat_history.character","text":"","code":"# S3 method for class 'character' chat_history(chat_history)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for chat_history() when the input is a single string — chat_history.character","text":"chat_history single string","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for chat_history() when the input is a data.frame — chat_history.data.frame","title":"Method for chat_history() when the input is a data.frame — chat_history.data.frame","text":"Creates chat_history object data frame.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for chat_history() when the input is a data.frame — chat_history.data.frame","text":"","code":"# S3 method for class 'data.frame' chat_history(chat_history)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for chat_history() when the input is a data.frame — chat_history.data.frame","text":"chat_history data frame 'role' 'content' columns, 'role' either 'user', 'assistant', 'system', 'content' character string representing chat message","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for chat_history() — chat_history.default","title":"Default method for chat_history() — chat_history.default","text":"Calls error indicates input character data.frame.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for chat_history() — chat_history.default","text":"","code":"# Default S3 method chat_history(chat_history)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for chat_history() — chat_history.default","text":"chat_history Object character data.frame","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default method for chat_history() — chat_history.default","text":"input character data.frame, appropriate method called (see `chat_history.character() chat_history.data.frame()).","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or validate chat_history object — chat_history","title":"Create or validate chat_history object — chat_history","text":"function creates validates chat_history object, ensuring matches expected format 'role' 'content' columns. separate methods data.frame character inputs includes helper function add system prompt chat history.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or validate chat_history object — chat_history","text":"","code":"chat_history(chat_history)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or validate chat_history object — chat_history","text":"chat_history single string, data.frame 'role' 'content' columns, NULL. data.frame provided, contain 'role' 'content' columns, 'role' either 'user', 'assistant', 'system', 'content' character string representing chat message","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create or validate chat_history object — chat_history","text":"valid chat history data.frame (class chat_history)","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/chat_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or validate chat_history object — chat_history","text":"","code":"chat <- \"Hi there!\" |>   chat_history() chat #>   role   content #> 1 user Hi there!  chat_from_df <- data.frame(   role = c(\"user\", \"assistant\"),   content = c(\"Hi there!\", \"Hello! How can I help you today?\") ) |>   chat_history() chat_from_df #>        role                          content #> 1      user                        Hi there! #> 2 assistant Hello! How can I help you today?"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/construct_prompt_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct prompt text from a tidyprompt object — construct_prompt_text","title":"Construct prompt text from a tidyprompt object — construct_prompt_text","text":"Construct prompt text tidyprompt object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/construct_prompt_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct prompt text from a tidyprompt object — construct_prompt_text","text":"","code":"construct_prompt_text(tidyprompt)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/construct_prompt_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct prompt text from a tidyprompt object — construct_prompt_text","text":"tidyprompt tidyprompt object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/construct_prompt_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct prompt text from a tidyprompt object — construct_prompt_text","text":"prompt text constructed tidyprompt object","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/df_to_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a dataframe to a string representation — df_to_string","title":"Convert a dataframe to a string representation — df_to_string","text":"Converts data frame string format, intended sending LLM (display logging).","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/df_to_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a dataframe to a string representation — df_to_string","text":"","code":"df_to_string(df, how = c(\"wide\", \"long\"))"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/df_to_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a dataframe to a string representation — df_to_string","text":"df data.frame object converted string way df converted string; either \"wide\" \"long\". \"wide\" presents column names first row, followed row values new row. \"long\" presents values row together column names, repeating every row two lines whitespace","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/df_to_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a dataframe to a string representation — df_to_string","text":"single string representing df","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/df_to_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a dataframe to a string representation — df_to_string","text":"","code":"cars |>   head(5) |>   df_to_string() |>   cat() #> speed, dist #> 4, 2 #> 4, 10 #> 7, 4 #> 7, 22 #> 8, 16"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/extract_from_return_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extract a specific element from a list — extract_from_return_list","title":"Function to extract a specific element from a list — extract_from_return_list","text":"function intended helper function piping output send_prompt() using return_mode = \"full\". allows extract specific element list returned send_prompt(), can useful piping.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/extract_from_return_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extract a specific element from a list — extract_from_return_list","text":"","code":"extract_from_return_list(list, name_of_element = \"response\")"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/extract_from_return_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extract a specific element from a list — extract_from_return_list","text":"list list, typically output send_prompt() return_mode = \"full\" name_of_element character string name element extract list","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/extract_from_return_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extract a specific element from a list — extract_from_return_list","text":"extracted element list","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/extract_from_return_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to extract a specific element from a list — extract_from_return_list","text":"","code":"if (FALSE) { # \\dontrun{   \"Hi!\" |>     send_prompt(llm_provider_ollama(), return_mode = \"full\") |>     extract_from_return_list(\"response\")   # --- Sending request to LLM provider (llama3.1:8b): ---   #   Hi!   # --- Receiving response from LLM provider: ---   #   It's nice to meet you. Is there something I can help you with or would you like to chat?   # [1] \"It's nice to meet you. Is there something I can help you with or would you like to chat?\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/extraction_fn_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and parse JSONs from a string (LLM response) — extraction_fn_json","title":"Extract and parse JSONs from a string (LLM response) — extraction_fn_json","text":"function extracts JSON blocks string parses using jsonlite::fromJSON(). can used extract JSONs LLM responses, immediately converting R objects.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/extraction_fn_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and parse JSONs from a string (LLM response) — extraction_fn_json","text":"","code":"extraction_fn_json(llm_response)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/extraction_fn_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and parse JSONs from a string (LLM response) — extraction_fn_json","text":"llm_response character string","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/extraction_fn_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and parse JSONs from a string (LLM response) — extraction_fn_json","text":"list parsed JSON objects","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/get_base_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get base prompt from tidyprompt — get_base_prompt","title":"Get base prompt from tidyprompt — get_base_prompt","text":"Get base prompt tidyprompt","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/get_base_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get base prompt from tidyprompt — get_base_prompt","text":"","code":"get_base_prompt(tidyprompt)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/get_base_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get base prompt from tidyprompt — get_base_prompt","text":"tidyprompt tidyprompt object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/get_base_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get base prompt from tidyprompt — get_base_prompt","text":"base prompt tidyprompt","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/get_prompt_wraps.html","id":null,"dir":"Reference","previous_headings":"","what":"Get prompt wraps from tidyprompt — get_prompt_wraps","title":"Get prompt wraps from tidyprompt — get_prompt_wraps","text":"Get prompt wraps tidyprompt","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/get_prompt_wraps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get prompt wraps from tidyprompt — get_prompt_wraps","text":"","code":"get_prompt_wraps(   tidyprompt,   order = c(\"default\", \"modification\", \"evaluation\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/get_prompt_wraps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get prompt wraps from tidyprompt — get_prompt_wraps","text":"tidyprompt tidyprompt object order order return prompt wraps. Options \"default\", \"modification\", \"evaluation\". \"default\" returns prompt wraps order added. \"modification\" returns prompt wraps order \"unspecified\", \"break\", \"mode\", \"tool\"; order prompt wraps applied base prompt constructing prompt text. \"evaluation\" returns prompt wraps order \"tool\", \"mode\", \"break\", \"unspecified\"; order prompt wraps applied LLM response extracting validating.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/get_prompt_wraps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get prompt wraps from tidyprompt — get_prompt_wraps","text":"list prompt wraps tidyprompt","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/is_tidyprompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate tidyprompt: returns TRUE if a valid tidyprompt object, otherwise FALSE — is_tidyprompt","title":"Validate tidyprompt: returns TRUE if a valid tidyprompt object, otherwise FALSE — is_tidyprompt","text":"Validate tidyprompt: returns TRUE valid tidyprompt object, otherwise FALSE","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/is_tidyprompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate tidyprompt: returns TRUE if a valid tidyprompt object, otherwise FALSE — is_tidyprompt","text":"","code":"is_tidyprompt(tidyprompt)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/is_tidyprompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate tidyprompt: returns TRUE if a valid tidyprompt object, otherwise FALSE — is_tidyprompt","text":"tidyprompt tidyprompt object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/is_tidyprompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate tidyprompt: returns TRUE if a valid tidyprompt object, otherwise FALSE — is_tidyprompt","text":"Logical indicating whether input valid tidyprompt object","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_break.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an llm_break object — llm_break","title":"Create an llm_break object — llm_break","text":"object used break extraction validation loop prompt_wrap() evaluated send_prompt(). extraction validation function returns object, loop broken extraction validation functions applied; instead, send_prompt() able return result point. may useful scenarios determined LLM unable provide response prompt.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_break.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an llm_break object — llm_break","text":"","code":"llm_break(object_to_return = NULL, success = FALSE)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_break.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an llm_break object — llm_break","text":"object_to_return object return response result send_prompt() object returned extraction validation function. success logical indicating whether send_prompt() loop break nonetheless considered successful completion extraction validation process. FALSE, object_to_return must NULL (response result send_prompt() always 'NULL' evaluation unsuccessful); FALSE, send_prompt() also print warning unsuccessful evaluation. TRUE, object_to_return returned response result send_prompt() (send_prompt()) print warning unsuccessful evaluation).","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_break.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an llm_break object — llm_break","text":"object class \"llm_break\"","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_break.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an llm_break object — llm_break","text":"","code":"# Example usage within an extraction function similar to the one in 'quit_if()': extraction_fn <- function(x) {   quit_detect_regex <- \"NO ANSWER\"    if (grepl(quit_detect_regex, x)) {       return(llm_break(         object_to_return = NULL,         success = TRUE       ))   }    return(x) }  # This extraction_fn would be part of a prompt_wrap()"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_feedback.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an llm_feedback object — llm_feedback","title":"Create an llm_feedback object — llm_feedback","text":"object used send feedback LLM LLM reply succesfully pass extraction validation function (handled send_prompt() passed tidyprompt() prompt_wrap()). feedback text sent back LLM. extraction validation function return object feedback text sent LLM.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_feedback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an llm_feedback object — llm_feedback","text":"","code":"llm_feedback(text, tool_result = FALSE)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_feedback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an llm_feedback object — llm_feedback","text":"text character string containing feedback text. sent back LLM passing extractor validator function tool_result logical indicating whether feedback tool result. TRUE, handled differently send_prompt(), presenting text 'system' message. ensures filtered cleaning context window send_prompt()","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_feedback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an llm_feedback object — llm_feedback","text":"object class \"llm_feedback\" containing feedback text","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_feedback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an llm_feedback object — llm_feedback","text":"","code":"# Example usage within a validation function similar to the one in 'answer_as_integer()': validation_fn <- function(x, min = 0, max = 100) {   if (x != floor(x)) { # Not a whole number     return(llm_feedback(       \"You must answer with only an integer (use no other characters).\"     ))   }   if (!is.null(min) && x < min) {     return(llm_feedback(glue::glue(       \"The number should be greater than or equal to {min}.\"     )))   }   if (!is.null(max) && x > max) {     return(llm_feedback(glue::glue(       \"The number should be less than or equal to {max}.\"     )))   }   return(TRUE) }  # This validation_fn would be part of a prompt_wrap()"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"llm_provider() R6 Class — llm_provider","title":"llm_provider() R6 Class — llm_provider","text":"class provides structure creating llm_provider() objects different implementations complete_chat function. Using class, can create llm_provider() object interacts different LLM providers, Ollama, OpenAI, custom providers.","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"llm_provider() R6 Class — llm_provider","text":"parameters named list parameters configure llm_provider(). Parameters may appended request body interacting LLM provider API verbose logical indicating whether interaction LLM provider printed console url URL LLM provider API endpoint chat completion api_key API key use authentication LLM provider API","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"llm_provider() R6 Class — llm_provider","text":"llm_provider$new() llm_provider$set_parameters() llm_provider$complete_chat() llm_provider$clone()","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"llm_provider() R6 Class — llm_provider","text":"Create new llm_provider() object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"llm_provider() R6 Class — llm_provider","text":"","code":"llm_provider$new(   complete_chat_function,   parameters = list(),   verbose = TRUE,   url = NULL,   api_key = NULL )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"llm_provider() R6 Class — llm_provider","text":"complete_chat_function Function called llm_provider() complete chat. function take chat_history data frame input return response object (list role content, detailing chat completion) parameters named list parameters configure llm_provider(). parameters may appended request body interacting LLM provider. example, model parameter may often required. 'stream' parameter may used indicate API stream, handled line make_llm_provider_request function. Parameters include chat_history, passed separate argument complete_chat_function. Paramters also include 'api_key' 'url'; treated separately verbose logical indicating whether interaction LLM provider printed console url URL LLM provider API endpoint chat completion (typically required, may left NULL cases, instance creating fake LLM provider) api_key API key use authentication LLM provider API (optional, required , instance, Ollama)","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"llm_provider() R6 Class — llm_provider","text":"new llm_provider() R6 object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"method-set-parameters-","dir":"Reference","previous_headings":"","what":"Method set_parameters()","title":"llm_provider() R6 Class — llm_provider","text":"Helper function set parameters llm_provider() object. function appends new parameters existing parameters list.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"llm_provider() R6 Class — llm_provider","text":"","code":"llm_provider$set_parameters(new_parameters)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"llm_provider() R6 Class — llm_provider","text":"new_parameters named list new parameters append existing parameters list","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"llm_provider() R6 Class — llm_provider","text":"modified llm_provider() object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"method-complete-chat-","dir":"Reference","previous_headings":"","what":"Method complete_chat()","title":"llm_provider() R6 Class — llm_provider","text":"complete_chat function; sends chat_history LLM provider using configured complete_chat_function. function typically called send_prompt function interact LLM provider, can also called directly.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"llm_provider() R6 Class — llm_provider","text":"","code":"llm_provider$complete_chat(chat_history)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"llm_provider() R6 Class — llm_provider","text":"chat_history data frame 'role' 'content' columns","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"llm_provider() R6 Class — llm_provider","text":"response LLM provider, named list 'role', 'content', 'http'. 'role' 'content' fields (required) contain extracted role content response (e.g., 'assistant' 'Hello, can help ?'). 'http' field (optional) may contain additional information, e.g., data HTTP response number tokens used.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"llm_provider() R6 Class — llm_provider","text":"objects class cloneable method.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"llm_provider() R6 Class — llm_provider","text":"","code":"llm_provider$clone(deep = FALSE)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"llm_provider() R6 Class — llm_provider","text":"deep Whether make deep clone.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_google_gemini.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Google Gemini llm_provider() instance — llm_provider_google_gemini","title":"Create a new Google Gemini llm_provider() instance — llm_provider_google_gemini","text":"Creates llm_provider() object interacts Google Gemini API. Streaming yet supported implementation.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_google_gemini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Google Gemini llm_provider() instance — llm_provider_google_gemini","text":"","code":"llm_provider_google_gemini(   parameters = list(model = \"gemini-1.5-flash\"),   verbose = getOption(\"tidyprompt.verbose\", TRUE),   url = \"https://generativelanguage.googleapis.com/v1beta/models/\",   api_key = Sys.getenv(\"GOOGLE_AI_STUDIO_API_KEY\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_google_gemini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Google Gemini llm_provider() instance — llm_provider_google_gemini","text":"parameters named list parameters. Currently following parameters required: model: name model use (see: https://ai.google.dev/gemini-api/docs/models/gemini) Additional parameters appended request body; see Google AI Studio API documentation information: https://ai.google.dev/gemini-api/docs/text-generation & https://github.com/google/generative-ai-docs/blob/main/site/en/gemini-api/docs/get-started/rest.ipynb verbose logical indicating whether interaction LLM provider printed console url URL Google Gemini API endpoint chat completion api_key API key use authentication Google Gemini API (see: https://aistudio.google.com/app/apikey)","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_google_gemini.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Google Gemini llm_provider() instance — llm_provider_google_gemini","text":"new llm_provider() object use Google Gemini API new llm_provider() object use Google Gemini API","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_google_gemini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Google Gemini llm_provider() instance — llm_provider_google_gemini","text":"","code":"# Various providers: ollama <- llm_provider_ollama() openai <- llm_provider_openai() openrouter <- llm_provider_openrouter() mistral <- llm_provider_mistral() groq <- llm_provider_groq() xai <- llm_provider_xai() gemini <- llm_provider_google_gemini()  # Initialize with settings: ollama <- llm_provider_ollama(   parameters = list(     model = \"llama3.2:3b\",     stream = TRUE   ),   verbose = TRUE,   url = \"http://localhost:11434/api/chat\" )  # Change settings: ollama$verbose <- FALSE ollama$parameters$stream <- FALSE ollama$parameters$model <- \"llama3.1:8b\"  if (FALSE) { # \\dontrun{   # Try a simple chat message with '$complete_chat()':   response <- ollama$complete_chat(\"Hi!\")   response   # $role   # [1] \"assistant\"   #   # $content   # [1] \"How's it going? Is there something I can help you with or would you like   # to chat?\"   #   # $http   # Response [http://localhost:11434/api/chat]   # Date: 2024-11-18 14:21   # Status: 200   # Content-Type: application/json; charset=utf-8   # Size: 375 B    # Use with send_prompt():   \"Hi\" |>     send_prompt(ollama)   # [1] \"How's your day going so far? Is there something I can help you with or   # would you like to chat?\" } # } # Various providers: ollama <- llm_provider_ollama() openai <- llm_provider_openai() openrouter <- llm_provider_openrouter() mistral <- llm_provider_mistral() groq <- llm_provider_groq() xai <- llm_provider_xai() gemini <- llm_provider_google_gemini()  # Initialize with settings: ollama <- llm_provider_ollama(   parameters = list(     model = \"llama3.2:3b\",     stream = TRUE   ),   verbose = TRUE,   url = \"http://localhost:11434/api/chat\" )  # Change settings: ollama$verbose <- FALSE ollama$parameters$stream <- FALSE ollama$parameters$model <- \"llama3.1:8b\"  if (FALSE) { # \\dontrun{   # Try a simple chat message with '$complete_chat()':   response <- ollama$complete_chat(\"Hi!\")   response   # $role   # [1] \"assistant\"   #   # $content   # [1] \"How's it going? Is there something I can help you with or would you like   # to chat?\"   #   # $http   # Response [http://localhost:11434/api/chat]   # Date: 2024-11-18 14:21   # Status: 200   # Content-Type: application/json; charset=utf-8   # Size: 375 B    # Use with send_prompt():   \"Hi\" |>     send_prompt(ollama)   # [1] \"How's your day going so far? Is there something I can help you with or   # would you like to chat?\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_groq.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Groq llm_provider() instance — llm_provider_groq","title":"Create a new Groq llm_provider() instance — llm_provider_groq","text":"Create new Groq llm_provider() instance","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_groq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Groq llm_provider() instance — llm_provider_groq","text":"","code":"llm_provider_groq(   parameters = list(model = \"llama-3.1-8b-instant\", stream = TRUE),   verbose = getOption(\"tidyprompt.verbose\", TRUE),   url = \"https://api.groq.com/openai/v1/chat/completions\",   api_key = Sys.getenv(\"GROQ_API_KEY\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_groq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Groq llm_provider() instance — llm_provider_groq","text":"parameters named list parameters. Currently following parameters required: model: name model use stream: logical indicating whether API stream responses Additional parameters appended request body; see Groq API documentation information: https://console.groq.com/docs/api-reference#chat-create verbose logical indicating whether interaction LLM provider printed console url URL Groq API endpoint chat completion api_key API key use authentication Groq API","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_groq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Groq llm_provider() instance — llm_provider_groq","text":"new llm_provider() object use Groq API","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_groq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Groq llm_provider() instance — llm_provider_groq","text":"","code":"# Various providers: ollama <- llm_provider_ollama() openai <- llm_provider_openai() openrouter <- llm_provider_openrouter() mistral <- llm_provider_mistral() groq <- llm_provider_groq() xai <- llm_provider_xai() gemini <- llm_provider_google_gemini()  # Initialize with settings: ollama <- llm_provider_ollama(   parameters = list(     model = \"llama3.2:3b\",     stream = TRUE   ),   verbose = TRUE,   url = \"http://localhost:11434/api/chat\" )  # Change settings: ollama$verbose <- FALSE ollama$parameters$stream <- FALSE ollama$parameters$model <- \"llama3.1:8b\"  if (FALSE) { # \\dontrun{   # Try a simple chat message with '$complete_chat()':   response <- ollama$complete_chat(\"Hi!\")   response   # $role   # [1] \"assistant\"   #   # $content   # [1] \"How's it going? Is there something I can help you with or would you like   # to chat?\"   #   # $http   # Response [http://localhost:11434/api/chat]   # Date: 2024-11-18 14:21   # Status: 200   # Content-Type: application/json; charset=utf-8   # Size: 375 B    # Use with send_prompt():   \"Hi\" |>     send_prompt(ollama)   # [1] \"How's your day going so far? Is there something I can help you with or   # would you like to chat?\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_mistral.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Mistral llm_provider() instance — llm_provider_mistral","title":"Create a new Mistral llm_provider() instance — llm_provider_mistral","text":"function creates new llm_provider() interacts Mistral API.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_mistral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Mistral llm_provider() instance — llm_provider_mistral","text":"","code":"llm_provider_mistral(   parameters = list(model = \"ministral-3b-latest\", stream =     getOption(\"tidyprompt.stream\", TRUE)),   verbose = getOption(\"tidyprompt.verbose\", TRUE),   url = \"https://api.mistral.ai/v1/chat/completions\",   api_key = Sys.getenv(\"MISTRAL_API_KEY\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_mistral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Mistral llm_provider() instance — llm_provider_mistral","text":"parameters named list parameters. Currently following parameters required: model: name model use stream: logical indicating whether API stream responses Additional parameters appended request body; see Mistral API documentation information: https://docs.mistral.ai/api/#tag/chat verbose logical indicating whether interaction LLM provider printed consol url URL Mistral API endpoint chat completion api_key API key use authentication Mistral API","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_mistral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Mistral llm_provider() instance — llm_provider_mistral","text":"new llm_provider() object use Mistral API","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_mistral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Mistral llm_provider() instance — llm_provider_mistral","text":"","code":"# Various providers: ollama <- llm_provider_ollama() openai <- llm_provider_openai() openrouter <- llm_provider_openrouter() mistral <- llm_provider_mistral() groq <- llm_provider_groq() xai <- llm_provider_xai() gemini <- llm_provider_google_gemini()  # Initialize with settings: ollama <- llm_provider_ollama(   parameters = list(     model = \"llama3.2:3b\",     stream = TRUE   ),   verbose = TRUE,   url = \"http://localhost:11434/api/chat\" )  # Change settings: ollama$verbose <- FALSE ollama$parameters$stream <- FALSE ollama$parameters$model <- \"llama3.1:8b\"  if (FALSE) { # \\dontrun{   # Try a simple chat message with '$complete_chat()':   response <- ollama$complete_chat(\"Hi!\")   response   # $role   # [1] \"assistant\"   #   # $content   # [1] \"How's it going? Is there something I can help you with or would you like   # to chat?\"   #   # $http   # Response [http://localhost:11434/api/chat]   # Date: 2024-11-18 14:21   # Status: 200   # Content-Type: application/json; charset=utf-8   # Size: 375 B    # Use with send_prompt():   \"Hi\" |>     send_prompt(ollama)   # [1] \"How's your day going so far? Is there something I can help you with or   # would you like to chat?\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_ollama.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Ollama llm_provider() instance — llm_provider_ollama","title":"Create a new Ollama llm_provider() instance — llm_provider_ollama","text":"Create new Ollama llm_provider() instance","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_ollama.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Ollama llm_provider() instance — llm_provider_ollama","text":"","code":"llm_provider_ollama(   parameters = list(model = \"llama3.1:8b\", stream = getOption(\"tidyprompt.stream\", TRUE)),   verbose = getOption(\"tidyprompt.verbose\", TRUE),   url = \"http://localhost:11434/api/chat\" )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_ollama.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Ollama llm_provider() instance — llm_provider_ollama","text":"parameters named list parameters. Currently following parameters required: model: name model use stream: logical indicating whether API stream responses Additional parameters may passed adding parameters list; parameters passed Ollama API via body POST request. Note various Ollama options need set list named 'options' within parameters list (e.g., context window size represented $parameters$options$num_ctx) verbose logical indicating whether interaction LLM provider printed console url URL Ollama API endpoint chat completion (typically: \"http://localhost:11434/api/chat\")","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_ollama.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Ollama llm_provider() instance — llm_provider_ollama","text":"new llm_provider() object use Ollama API","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_ollama.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Ollama llm_provider() instance — llm_provider_ollama","text":"","code":"# Various providers: ollama <- llm_provider_ollama() openai <- llm_provider_openai() openrouter <- llm_provider_openrouter() mistral <- llm_provider_mistral() groq <- llm_provider_groq() xai <- llm_provider_xai() gemini <- llm_provider_google_gemini()  # Initialize with settings: ollama <- llm_provider_ollama(   parameters = list(     model = \"llama3.2:3b\",     stream = TRUE   ),   verbose = TRUE,   url = \"http://localhost:11434/api/chat\" )  # Change settings: ollama$verbose <- FALSE ollama$parameters$stream <- FALSE ollama$parameters$model <- \"llama3.1:8b\"  if (FALSE) { # \\dontrun{   # Try a simple chat message with '$complete_chat()':   response <- ollama$complete_chat(\"Hi!\")   response   # $role   # [1] \"assistant\"   #   # $content   # [1] \"How's it going? Is there something I can help you with or would you like   # to chat?\"   #   # $http   # Response [http://localhost:11434/api/chat]   # Date: 2024-11-18 14:21   # Status: 200   # Content-Type: application/json; charset=utf-8   # Size: 375 B    # Use with send_prompt():   \"Hi\" |>     send_prompt(ollama)   # [1] \"How's your day going so far? Is there something I can help you with or   # would you like to chat?\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openai.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new OpenAI llm_provider() instance — llm_provider_openai","title":"Create a new OpenAI llm_provider() instance — llm_provider_openai","text":"function creates new llm_provider() interacts Open AI API","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new OpenAI llm_provider() instance — llm_provider_openai","text":"","code":"llm_provider_openai(   parameters = list(model = \"gpt-4o-mini\", stream = getOption(\"tidyprompt.stream\", TRUE)),   verbose = getOption(\"tidyprompt.verbose\", TRUE),   url = \"https://api.openai.com/v1/chat/completions\",   api_key = Sys.getenv(\"OPENAI_API_KEY\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new OpenAI llm_provider() instance — llm_provider_openai","text":"parameters named list parameters. Currently following parameters required: model: name model use api_key: API key use authentication OpenAI API. project API key (user API key) url: URL OpenAI API (may also alternative endpoint provides similar API.) stream: logical indicating whether API stream responses Additional parameters appended request body; see OpenAI API documentation information: https://platform.openai.com/docs/api-reference/chat verbose logical indicating whether interaction LLM provider printed console. Default TRUE. url URL OpenAI API endpoint chat completion (typically: \"https://api.openai.com/v1/chat/completions\") api_key API key use authentication OpenAI API","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new OpenAI llm_provider() instance — llm_provider_openai","text":"new llm_provider() object use OpenAI API","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new OpenAI llm_provider() instance — llm_provider_openai","text":"","code":"# Various providers: ollama <- llm_provider_ollama() openai <- llm_provider_openai() openrouter <- llm_provider_openrouter() mistral <- llm_provider_mistral() groq <- llm_provider_groq() xai <- llm_provider_xai() gemini <- llm_provider_google_gemini()  # Initialize with settings: ollama <- llm_provider_ollama(   parameters = list(     model = \"llama3.2:3b\",     stream = TRUE   ),   verbose = TRUE,   url = \"http://localhost:11434/api/chat\" )  # Change settings: ollama$verbose <- FALSE ollama$parameters$stream <- FALSE ollama$parameters$model <- \"llama3.1:8b\"  if (FALSE) { # \\dontrun{   # Try a simple chat message with '$complete_chat()':   response <- ollama$complete_chat(\"Hi!\")   response   # $role   # [1] \"assistant\"   #   # $content   # [1] \"How's it going? Is there something I can help you with or would you like   # to chat?\"   #   # $http   # Response [http://localhost:11434/api/chat]   # Date: 2024-11-18 14:21   # Status: 200   # Content-Type: application/json; charset=utf-8   # Size: 375 B    # Use with send_prompt():   \"Hi\" |>     send_prompt(ollama)   # [1] \"How's your day going so far? Is there something I can help you with or   # would you like to chat?\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openrouter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new OpenRouter llm_provider() instance — llm_provider_openrouter","title":"Create a new OpenRouter llm_provider() instance — llm_provider_openrouter","text":"Create new OpenRouter llm_provider() instance","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openrouter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new OpenRouter llm_provider() instance — llm_provider_openrouter","text":"","code":"llm_provider_openrouter(   parameters = list(model = \"qwen/qwen-2.5-7b-instruct\", stream =     getOption(\"tidyprompt.stream\", TRUE)),   verbose = getOption(\"tidyprompt.verbose\", TRUE),   url = \"https://openrouter.ai/api/v1/chat/completions\",   api_key = Sys.getenv(\"OPENROUTER_API_KEY\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openrouter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new OpenRouter llm_provider() instance — llm_provider_openrouter","text":"parameters named list parameters. Currently following parameters required: model: name model use stream: logical indicating whether API stream responses Additional parameters appended request body; see OpenRouter API documentation information: https://openrouter.ai/docs/parameters verbose logical indicating whether interaction LLM provider printed console. url URL OpenRouter API endpoint chat completion api_key API key use authentication OpenRouter API","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openrouter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new OpenRouter llm_provider() instance — llm_provider_openrouter","text":"new llm_provider() object use OpenRouter API","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_openrouter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new OpenRouter llm_provider() instance — llm_provider_openrouter","text":"","code":"# Various providers: ollama <- llm_provider_ollama() openai <- llm_provider_openai() openrouter <- llm_provider_openrouter() mistral <- llm_provider_mistral() groq <- llm_provider_groq() xai <- llm_provider_xai() gemini <- llm_provider_google_gemini()  # Initialize with settings: ollama <- llm_provider_ollama(   parameters = list(     model = \"llama3.2:3b\",     stream = TRUE   ),   verbose = TRUE,   url = \"http://localhost:11434/api/chat\" )  # Change settings: ollama$verbose <- FALSE ollama$parameters$stream <- FALSE ollama$parameters$model <- \"llama3.1:8b\"  if (FALSE) { # \\dontrun{   # Try a simple chat message with '$complete_chat()':   response <- ollama$complete_chat(\"Hi!\")   response   # $role   # [1] \"assistant\"   #   # $content   # [1] \"How's it going? Is there something I can help you with or would you like   # to chat?\"   #   # $http   # Response [http://localhost:11434/api/chat]   # Date: 2024-11-18 14:21   # Status: 200   # Content-Type: application/json; charset=utf-8   # Size: 375 B    # Use with send_prompt():   \"Hi\" |>     send_prompt(ollama)   # [1] \"How's your day going so far? Is there something I can help you with or   # would you like to chat?\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_xai.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new XAI (Grok) llm_provider() instance — llm_provider_xai","title":"Create a new XAI (Grok) llm_provider() instance — llm_provider_xai","text":"Create new XAI (Grok) llm_provider() instance","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_xai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new XAI (Grok) llm_provider() instance — llm_provider_xai","text":"","code":"llm_provider_xai(   parameters = list(model = \"grok-beta\", stream = getOption(\"tidyprompt.stream\", TRUE)),   verbose = getOption(\"tidyprompt.verbose\", TRUE),   url = \"https://api.x.ai/v1/chat/completions\",   api_key = Sys.getenv(\"XAI_API_KEY\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_xai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new XAI (Grok) llm_provider() instance — llm_provider_xai","text":"parameters named list parameters. Currently following parameters required: model: name model use stream: logical indicating whether API stream responses Additional parameters appended request body; see XAI API documentation information: https://docs.x.ai/api/endpoints#chat-completions verbose logical indicating whether interaction LLM provider printed console. Default TRUE. url URL XAI API endpoint chat completion api_key API key use authentication XAI API","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_xai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new XAI (Grok) llm_provider() instance — llm_provider_xai","text":"new llm_provider() object use XAI API","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/llm_provider_xai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new XAI (Grok) llm_provider() instance — llm_provider_xai","text":"","code":"# Various providers: ollama <- llm_provider_ollama() openai <- llm_provider_openai() openrouter <- llm_provider_openrouter() mistral <- llm_provider_mistral() groq <- llm_provider_groq() xai <- llm_provider_xai() gemini <- llm_provider_google_gemini()  # Initialize with settings: ollama <- llm_provider_ollama(   parameters = list(     model = \"llama3.2:3b\",     stream = TRUE   ),   verbose = TRUE,   url = \"http://localhost:11434/api/chat\" )  # Change settings: ollama$verbose <- FALSE ollama$parameters$stream <- FALSE ollama$parameters$model <- \"llama3.1:8b\"  if (FALSE) { # \\dontrun{   # Try a simple chat message with '$complete_chat()':   response <- ollama$complete_chat(\"Hi!\")   response   # $role   # [1] \"assistant\"   #   # $content   # [1] \"How's it going? Is there something I can help you with or would you like   # to chat?\"   #   # $http   # Response [http://localhost:11434/api/chat]   # Date: 2024-11-18 14:21   # Status: 200   # Content-Type: application/json; charset=utf-8   # Size: 375 B    # Use with send_prompt():   \"Hi\" |>     send_prompt(ollama)   # [1] \"How's your day going so far? Is there something I can help you with or   # would you like to chat?\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/make_llm_provider_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a request to an LLM provider — make_llm_provider_request","title":"Make a request to an LLM provider — make_llm_provider_request","text":"Helper function handle making requests LLM providers, used within complete_chat() function LLM provider.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/make_llm_provider_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a request to an LLM provider — make_llm_provider_request","text":"","code":"make_llm_provider_request(   url,   headers = NULL,   body,   stream = NULL,   verbose = getOption(\"tidyprompt.verbose\", TRUE),   stream_api_type = c(\"openai\", \"ollama\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/make_llm_provider_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a request to an LLM provider — make_llm_provider_request","text":"url URL LLM provider API endpoint headers named list headers passed API (can NULL) body body POST request stream logical indicating whether API stream responses verbose logical indicating whether interaction LLM provider printed console. Default TRUE. stream_api_type type API use; specifically required handle streaming. Currently, \"openai\" \"ollama\" implemented. \"openai\" also work similar APIs chat completion","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/make_llm_provider_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a request to an LLM provider — make_llm_provider_request","text":"list role content response LLM provider","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/print.tidyprompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for tidyprompt() objects — print.tidyprompt","title":"Print method for tidyprompt() objects — print.tidyprompt","text":"function custom print method displaying tidyprompt() object. tidyprompt() typically contains base prompt may additional prompt wrappers modify . function applies modifications specified wrapper functions displays resulting prompt structured visually clear manner.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/print.tidyprompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for tidyprompt() objects — print.tidyprompt","text":"","code":"# S3 method for class 'tidyprompt' print(x, ...)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/print.tidyprompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for tidyprompt() objects — print.tidyprompt","text":"x tidyprompt() object. object contain: base_prompt character string containing base prompt text prompt_wraps list containing wrapper functions modify base prompt ... Additional arguments passed print.tidyprompt (used; needs present line guidelines generic functions)","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/print.tidyprompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for tidyprompt() objects — print.tidyprompt","text":"function used side effect printing prompt console. returns p invisibly","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/print.tidyprompt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print method for tidyprompt() objects — print.tidyprompt","text":"print.tidyprompt function displays base prompt , applicable, modified prompt applying wrapper functions. output formatted line breaks preserved colored text distinguish metadata prompt content. done using cli package enhance readability, similar printing tibbles tidyverse","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/print.tidyprompt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for tidyprompt() objects — print.tidyprompt","text":"","code":"# Creating a simple tidyprompt object prompt <- tidyprompt(\"What is the capital of France?\")  # Print the prompt object print(prompt) #> <tidyprompt> #> base prompt: #> > What is the capital of France?  #> Use '<tidyprompt>$base_prompt' to show the base prompt text. #> Use '<tidyprompt> |> construct_prompt_text()' to get the full prompt text. #>   # Adding some wrapper functions prompt <- prompt |>   prompt_wrap(modify_fn = \\(x) paste0(\"Answer concisely: \", x))  # Print the modified prompt object print(prompt) #> <tidyprompt> #> The base prompt is modified by a prompt wrap, resulting in: #> > Answer concisely: What is the capital of France?  #> Use '<tidyprompt>$prompt_wraps' to show the prompt wraps. #> Use '<tidyprompt>$base_prompt' to show the base prompt text. #> Use '<tidyprompt> |> construct_prompt_text()' to get the full prompt text. #>"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for prompt_wrap() — prompt_wrap.default","title":"Default method for prompt_wrap() — prompt_wrap.default","text":"Attempts create tidyprompt() object whatever passed 'prompt'; calls internal function append prompt_wrap().","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for prompt_wrap() — prompt_wrap.default","text":"","code":"# Default S3 method prompt_wrap(prompt, ...)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for prompt_wrap() — prompt_wrap.default","text":"prompt single string tidyprompt() object ... Additional arguments","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default method for prompt_wrap() — prompt_wrap.default","text":"tidyprompt() object prompt_wrap() appended ","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a prompt with empowering functions — prompt_wrap","title":"Wrap a prompt with empowering functions — prompt_wrap","text":"function takes single string tidyprompt() object adds new prompt wrap . prompt wrap set functions modify prompt text, extract value LLM response, validate extracted value. functions used ensure prompt LLM response correct format meets specified criteria.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a prompt with empowering functions — prompt_wrap","text":"","code":"prompt_wrap(   prompt,   modify_fn = NULL,   extraction_fn = NULL,   validation_fn = NULL,   type = c(\"unspecified\", \"mode\", \"tool\", \"break\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a prompt with empowering functions — prompt_wrap","text":"prompt single string tidyprompt() object modify_fn function takes previous prompt text (first argument) returns new prompt text extraction_fn function takes LLM response (first argument) attempts extract value . Upon succesful extraction, function return extracted value. extraction fails, function return llm_feedback() message sent back LLM initiate retry. special object llm_break() can returned break extraction validation loop validation_fn function takes (extracted) LLM response (first argument) attempts validate . Upon succesful validation, function return TRUE. validation fails, function return llm_feedback() message sent back LLM. special object llm_break() can returned break extraction validation loop type type prompt wrap; one 'unspecified', 'mode', 'tool', 'break'. Types used determine order prompt wraps applied. constructing prompt text, prompt wraps applied base prompt following order: 'unspecified', 'break', 'mode', 'tool'. evaluating LLM response applying extraction validation functions, prompt wraps applied reverse order: 'tool', 'mode', 'break', 'unspecified'. Order among type preserved order added prompt. Example tool add_tools(); example mode answer_by_react(). Example break quit_if(). prompt wraps 'unspecified', like answer_as_regex() add_text()","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap a prompt with empowering functions — prompt_wrap","text":"tidyprompt() object prompt_wrap() appended ","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap a prompt with empowering functions — prompt_wrap","text":"","code":"# A custom prompt_wrap may be created during piping prompt <- \"Hi there!\" |>   prompt_wrap(     modify_fn = function(base_prompt) {       paste(base_prompt, \"How are you?\", sep = \"\\n\\n\")     }   ) prompt #> <tidyprompt> #> The base prompt is modified by a prompt wrap, resulting in: #> > Hi there! #> >  #> > How are you?  #> Use '<tidyprompt>$prompt_wraps' to show the prompt wraps. #> Use '<tidyprompt>$base_prompt' to show the base prompt text. #> Use '<tidyprompt> |> construct_prompt_text()' to get the full prompt text. #>   # (Shorter notation of the above:) prompt <- \"Hi there!\" |>   prompt_wrap(\\(x) paste(x, \"How are you?\", sep = \"\\n\\n\"))  # It may often be preferred to make a function which takes a prompt and #   returns a wrapped prompt: my_prompt_wrap <- function(prompt) {   modify_fn <- function(base_prompt) {     paste(base_prompt, \"How are you?\", sep = \"\\n\\n\")   }    prompt_wrap(prompt, modify_fn) } prompt <- \"Hi there!\" |>   my_prompt_wrap()  # For more advanced examples, take a look at the source code of the #   pre-built prompt wraps in the tidyprompt package, like #   answer_as_boolean, answer_as_integer, add_tools, answer_as_code, etc. # Below is the source code for the 'answer_as_integer' prompt wrap function:  #' Make LLM answer as an integer (between min and max) #' #' @param prompt A single string or a [tidyprompt()] object #' @param min (optional) Minimum value for the integer #' @param max (optional) Maximum value for the integer #' @param add_instruction_to_prompt (optional) Add instruction for replying #' as an integer to the prompt text. Set to FALSE for debugging if extractions/validations #' are working as expected (without instruction the answer should fail the #' validation function, initiating a retry) #' #' @return A [tidyprompt()] with an added [prompt_wrap()] which #' will ensure that the LLM response is an integer. #' #' @export #' #' @example inst/examples/answer_as_integer.R #' #' @family pre_built_prompt_wraps #' @family answer_as_prompt_wraps answer_as_integer <- function(     prompt,     min = NULL,     max = NULL,     add_instruction_to_prompt = TRUE ) {   instruction <- \"You must answer with only an integer (use no other characters).\"    if (!is.null(min) && !is.null(max)) {     instruction <- paste(instruction, glue::glue(       \"Enter an integer between {min} and {max}.\"     ))   } else if (!is.null(min)) {     instruction <- paste(instruction, glue::glue(       \"Enter an integer greater than or equal to {min}.\"     ))   } else if (!is.null(max)) {     instruction <- paste(instruction, glue::glue(       \"Enter an integer less than or equal to {max}.\"     ))   }    modify_fn <- function(original_prompt_text) {     if (!add_instruction_to_prompt) {       return(original_prompt_text)     }      glue::glue(\"{original_prompt_text}\\n\\n{instruction}\")   }    extraction_fn <- function(x) {     extracted <- suppressWarnings(as.numeric(x))     if (is.na(extracted)) {       return(llm_feedback(instruction))     }     return(extracted)   }    validation_fn <- function(x) {     if (x != floor(x)) { # Not a whole number       return(llm_feedback(instruction))     }      if (!is.null(min) && x < min) {       return(llm_feedback(glue::glue(         \"The number should be greater than or equal to {min}.\"       )))     }     if (!is.null(max) && x > max) {       return(llm_feedback(glue::glue(         \"The number should be less than or equal to {max}.\"       )))     }     return(TRUE)   }    prompt_wrap(prompt, modify_fn, extraction_fn, validation_fn) }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.tidyprompt.html","id":null,"dir":"Reference","previous_headings":"","what":"prompt_wrap() method for when a tidyprompt() object is supplied — prompt_wrap.tidyprompt","title":"prompt_wrap() method for when a tidyprompt() object is supplied — prompt_wrap.tidyprompt","text":"Calls internal function append prompt wrap.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.tidyprompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prompt_wrap() method for when a tidyprompt() object is supplied — prompt_wrap.tidyprompt","text":"","code":"# S3 method for class 'tidyprompt' prompt_wrap(prompt, ...)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.tidyprompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prompt_wrap() method for when a tidyprompt() object is supplied — prompt_wrap.tidyprompt","text":"prompt single string tidyprompt() object ... Additional arguments","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/prompt_wrap.tidyprompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prompt_wrap() method for when a tidyprompt() object is supplied — prompt_wrap.tidyprompt","text":"tidyprompt() object prompt_wrap() appended ","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/quit_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Make evaluation of a prompt stop if LLM gives a specific response — quit_if","title":"Make evaluation of a prompt stop if LLM gives a specific response — quit_if","text":"function used wrap tidyprompt() object ensure evaluation stop LLM says answer prompt. useful scenarios determined LLM unable provide response prompt.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/quit_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make evaluation of a prompt stop if LLM gives a specific response — quit_if","text":"","code":"quit_if(   prompt,   quit_detect_regex = \"NO ANSWER\",   instruction =     paste0(\"If you think that you cannot provide a valid answer, you must type:\\n\",     \"'NO ANSWER' (use no other characters)\"),   success = TRUE,   response_result = c(\"null\", \"llm_response\", \"regex_match\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/quit_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make evaluation of a prompt stop if LLM gives a specific response — quit_if","text":"prompt single string tidyprompt() object quit_detect_regex regular expression detect LLM's response cause evaluation stop. default detect string \"ANSWER\" response instruction string added prompt instruct LLM respond answer prompt. default \"think provide valid answer, must type: 'ANSWER' (use characters)\". parameter can set NULL instruction needed prompt success logical indicating whether send_prompt() loop break nonetheless considered successful completion extraction validation process. FALSE, object_to_return must always set NULL thus parameter 'response_result' must also set 'null'; FALSE, send_prompt() also print warning unsuccessful evaluation. TRUE, object_to_return returned response result send_prompt() (send_prompt() print warning unsuccessful evaluation); parameter 'response_result' determine returned response result send_prompt(). response_result character string indicating returned quit_detect_regex detected LLM's response. default 'null', return NULL response result o f send_prompt(). 'llm_response', full LLM response returned response result send_prompt(). 'regex_match', part LLM response matches quit_detect_regex returned response result send_prompt()","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/quit_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make evaluation of a prompt stop if LLM gives a specific response — quit_if","text":"tidyprompt() added prompt_wrap() ensure evaluation stop upon detection quit_detect_regex LLM's response","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/quit_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make evaluation of a prompt stop if LLM gives a specific response — quit_if","text":"","code":"if (FALSE) { # \\dontrun{   \"What the favourite food of my cat on Thursday mornings?\" |>     quit_if() |>     send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   What the favourite food of my cat on Thursday mornings?   #   #   If you think that you cannot provide a valid answer, you must type:   #   'NO ANSWER' (use no other characters)   # --- Receiving response from LLM provider: ---   #   NO ANSWER   # NULL } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/send_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Send a prompt or tidyprompt() to a LLM provider — send_prompt","title":"Send a prompt or tidyprompt() to a LLM provider — send_prompt","text":"function responsible sending strings tidyprompt() objects, including prompt wraps, LLM provider (see llm_provider()) evaluation. function interact LLM provider successful response received maximum number interactions reached. function apply extraction validation functions LLM response, specified prompt wraps (see prompt_wrap()). maximum number interactions","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/send_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send a prompt or tidyprompt() to a LLM provider — send_prompt","text":"","code":"send_prompt(   prompt,   llm_provider = llm_provider_ollama(),   max_interactions = 10,   clean_chat_history = TRUE,   verbose = NULL,   stream = NULL,   return_mode = c(\"only_response\", \"full\") )"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/send_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send a prompt or tidyprompt() to a LLM provider — send_prompt","text":"prompt string tidyprompt() object llm_provider llm_provider() object (default llm_provider_ollama()) max_interactions Maximum number interactions allowed LLM provider. Default 10. maximum number interactions reached without successful response, 'NULL' returned response (see return value) clean_chat_history chat history cleaned interaction. Cleaning chat history means first last message user, last message assistant, messages system used requesting new answer LLM; keeping context window clean may increase LLM's performance verbose interaction LLM provider printed console. overrule 'verbose' setting LLM provider stream interaction LLM provider streamed. setting used LLM provider already 'stream' parameter (indicates support streaming). setting overrule 'stream' setting LLM provider return_mode One 'full' 'only_response'. See return value","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/send_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send a prompt or tidyprompt() to a LLM provider — send_prompt","text":"return mode 'only_response', function return LLM response extraction validation functions applied (NULL returned unsucessful maximum number interactions). return mode 'full', function return list following elements: 'response' (LLM response extraction validation functions applied; NULL returned unsucessful maximum number interactions), 'chat_history' (dataframe full chat history led final response), 'chat_history_clean' (dataframe cleaned chat history led final response; , first last message user, last message assistant, messages system kept), 'start_time' (time function called), 'end_time' (time function ended), 'duration_seconds' (duration function seconds), 'http_list' (list HTTP requests full responses made chat completions). using 'full' want access specific element (base R) piping, can use 'extract_from_return_list()' function assist ","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/send_prompt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send a prompt or tidyprompt() to a LLM provider — send_prompt","text":"","code":"if (FALSE) { # \\dontrun{   \"Hi!\" |>     send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   Hi!   # --- Receiving response from LLM provider: ---   #   It's nice to meet you. Is there something I can help you with, or would you like to chat?   # [1] \"It's nice to meet you. Is there something I can help you with, or would you like to chat?\"    \"Hi!\" |>     send_prompt(llm_provider_ollama(), return_mode = \"full\")   # --- Sending request to LLM provider (llama3.1:8b): ---   #   Hi!   # --- Receiving response from LLM provider: ---   #   It's nice to meet you. Is there something I can help you with, or would you like to chat?   # $response   # [1] \"It's nice to meet you. Is there something I can help you with, or would you like to chat?\"   #   # $chat_history   # ...   #   # $chat_history_clean   # ...   #   # $start_time   # [1] \"2024-11-18 15:43:12 CET\"   #   # $end_time   # [1] \"2024-11-18 15:43:13 CET\"   #   # $duration_seconds   # [1] 1.13276   #   # $http_list   # $http_list[[1]]   # Response [http://localhost:11434/api/chat]   #   Date: 2024-11-18 14:43   #   Status: 200   #   Content-Type: application/x-ndjson   # <EMPTY BODY>    \"Hi!\" |>     add_text(\"What is 5 + 5?\") |>     answer_as_integer() |>     send_prompt(llm_provider_ollama(), verbose = FALSE)   # [1] 10 } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/set_system_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Set system prompt — set_system_prompt","title":"Set system prompt — set_system_prompt","text":"Set system prompt prompt. system prompt added message role 'system' start chat history prompt evaluated send_prompt().","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/set_system_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set system prompt — set_system_prompt","text":"","code":"set_system_prompt(prompt, system_prompt)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/set_system_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set system prompt — set_system_prompt","text":"prompt single string tidyprompt() object system_prompt single character string representing system prompt","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/set_system_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set system prompt — set_system_prompt","text":"tidyprompt() system prompt set","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/set_system_prompt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set system prompt — set_system_prompt","text":"system prompt stored tidyprompt() object '$system_prompt'.","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/set_system_prompt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set system prompt — set_system_prompt","text":"","code":"prompt <- \"Hi there!\" |>   set_system_prompt(\"You are an assistant who always answers in very short poems.\") prompt$system_prompt #> [1] \"You are an assistant who always answers in very short poems.\"  if (FALSE) { # \\dontrun{   prompt |>     send_prompt(llm_provider_ollama())   # --- Sending request to LLM provider (llama3.1:8b): ---   #   Hi there!   # --- Receiving response from LLM provider: ---   #   Hello to you, I say,   #   Welcome here, come what may!   #   How can I assist today?   # [1] \"Hello to you, I say,\\nWelcome here, come what may!\\nHow can I assist today?\" } # }"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/skim_with_labels_and_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Skim a dataframe and include labels and levels — skim_with_labels_and_levels","title":"Skim a dataframe and include labels and levels — skim_with_labels_and_levels","text":"function takes data.frame returns skim summary variable names, labels, levels categorical variables. wrapper around skimr::skim() function.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/skim_with_labels_and_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skim a dataframe and include labels and levels — skim_with_labels_and_levels","text":"","code":"skim_with_labels_and_levels(data)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/skim_with_labels_and_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skim a dataframe and include labels and levels — skim_with_labels_and_levels","text":"data data.frame skimmed","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/skim_with_labels_and_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skim a dataframe and include labels and levels — skim_with_labels_and_levels","text":"data.frame variable names, labels, levels, skim summary","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/skim_with_labels_and_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skim a dataframe and include labels and levels — skim_with_labels_and_levels","text":"","code":"# First add some labels to 'mtcars': mtcars$car <- rownames(mtcars) mtcars$car <- factor(mtcars$car, levels = rownames(mtcars)) attr(mtcars$car, \"label\") <- \"Name of the car\"  # Then skim the data: mtcars |>   skim_with_labels_and_levels() #>    variable     description       levels skim_type n_missing complete_rate #> 1        am            <NA>           NA   numeric         0             1 #> 2       car Name of the car Mazda RX....    factor         0             1 #> 3      carb            <NA>           NA   numeric         0             1 #> 4       cyl            <NA>           NA   numeric         0             1 #> 5      disp            <NA>           NA   numeric         0             1 #> 6      drat            <NA>           NA   numeric         0             1 #> 7      gear            <NA>           NA   numeric         0             1 #> 8        hp            <NA>           NA   numeric         0             1 #> 9       mpg            <NA>           NA   numeric         0             1 #> 10     qsec            <NA>           NA   numeric         0             1 #> 11       vs            <NA>           NA   numeric         0             1 #> 12       wt            <NA>           NA   numeric         0             1 #>    factor.ordered factor.n_unique              factor.top_counts numeric.mean #> 1              NA              NA                           <NA>     0.406250 #> 2           FALSE              32 Maz: 1, Maz: 1, Dat: 1, Hor: 1           NA #> 3              NA              NA                           <NA>     2.812500 #> 4              NA              NA                           <NA>     6.187500 #> 5              NA              NA                           <NA>   230.721875 #> 6              NA              NA                           <NA>     3.596563 #> 7              NA              NA                           <NA>     3.687500 #> 8              NA              NA                           <NA>   146.687500 #> 9              NA              NA                           <NA>    20.090625 #> 10             NA              NA                           <NA>    17.848750 #> 11             NA              NA                           <NA>     0.437500 #> 12             NA              NA                           <NA>     3.217250 #>     numeric.sd numeric.p0 numeric.p25 numeric.p50 numeric.p75 numeric.p100 #> 1    0.4989909      0.000     0.00000       0.000        1.00        1.000 #> 2           NA         NA          NA          NA          NA           NA #> 3    1.6152000      1.000     2.00000       2.000        4.00        8.000 #> 4    1.7859216      4.000     4.00000       6.000        8.00        8.000 #> 5  123.9386938     71.100   120.82500     196.300      326.00      472.000 #> 6    0.5346787      2.760     3.08000       3.695        3.92        4.930 #> 7    0.7378041      3.000     3.00000       4.000        4.00        5.000 #> 8   68.5628685     52.000    96.50000     123.000      180.00      335.000 #> 9    6.0269481     10.400    15.42500      19.200       22.80       33.900 #> 10   1.7869432     14.500    16.89250      17.710       18.90       22.900 #> 11   0.5040161      0.000     0.00000       0.000        1.00        1.000 #> 12   0.9784574      1.513     2.58125       3.325        3.61        5.424 #>    numeric.hist #> 1         ▇▁▁▁▆ #> 2          <NA> #> 3         ▇▂▅▁▁ #> 4         ▆▁▃▁▇ #> 5         ▇▃▃▃▂ #> 6         ▇▃▇▅▁ #> 7         ▇▁▆▁▂ #> 8         ▇▇▆▃▁ #> 9         ▃▇▅▁▂ #> 10        ▃▇▇▂▁ #> 11        ▇▁▁▁▆ #> 12        ▃▃▇▁▂"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyprompt: Prompt Large Language Models ('LLMs') And Enhance Their Functionality — tidyprompt-package","title":"tidyprompt: Prompt Large Language Models ('LLMs') And Enhance Their Functionality — tidyprompt-package","text":"‘tidyprompt’ R package easily prompt large language models ('LLMs') enhance functionality. framework provided allows users construct LLM prompts using 'tidyverse'-inspired piping syntax. 'Prompt wraps' influence LLM handles base prompt, modifying original text applying extraction validation functions LLM response. Users can choose library pre-built prompt wraps write . allows obtaining structured LLM output, automatic feedback retries necessary. Additionally, package supports LLM reasoning modes (e.g., chain thought), autonomous R function calling, R code generation evaluation. 'tidyprompt' compatible LLM provider offers chat completions.","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyprompt: Prompt Large Language Models ('LLMs') And Enhance Their Functionality — tidyprompt-package","text":"Maintainer: Luka Koning l.koning@kennispunttwente.nl [copyright holder] Authors: Tjark Van de Merwe t.vandemerwe@kennispunttwente.nl [copyright holder] contributors: Kennispunt Twente info@kennispunttwente.nl [funder]","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to create a tidyprompt object from a character string — tidyprompt.character","title":"Method to create a tidyprompt object from a character string — tidyprompt.character","text":"Method create tidyprompt object character string","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to create a tidyprompt object from a character string — tidyprompt.character","text":"","code":"# S3 method for class 'character' tidyprompt(input)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to create a tidyprompt object from a character string — tidyprompt.character","text":"input Input create_tidyprompt; base prompt","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to create a tidyprompt object from a character string — tidyprompt.character","text":"tidyprompt object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method to create a tidyprompt object — tidyprompt.default","title":"Default method to create a tidyprompt object — tidyprompt.default","text":"called input character string tidyprompt object.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method to create a tidyprompt object — tidyprompt.default","text":"","code":"# Default S3 method tidyprompt(input)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method to create a tidyprompt object — tidyprompt.default","text":"input Input create_tidyprompt","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default method to create a tidyprompt object — tidyprompt.default","text":"error message stating input type suitable","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods to create, construct, and empower prompt objects — tidyprompt","title":"Methods to create, construct, and empower prompt objects — tidyprompt","text":"tidyprompt object contains initial prompt text list prompt_wrap(). prompt wraps contain functions modify prompt text way, , LLM response prompt given, apply extraction validation response. Using tidyprompt() prompt_wrap() objects allows easy chaining modifications empowerements prompt, ensuring LLM output meet desired criteria. tidyprompt() object offers many possibilities, structured validated output, LLM function calling, LLM code generation evaluation.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods to create, construct, and empower prompt objects — tidyprompt","text":"","code":"tidyprompt(input)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods to create, construct, and empower prompt objects — tidyprompt","text":"input Input prompt. character string passed, new prompt object created character string base prompt.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods to create, construct, and empower prompt objects — tidyprompt","text":"prompt object (error unsuitable input provided)","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.tidyprompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate tidyprompt — tidyprompt.tidyprompt","title":"Validate tidyprompt — tidyprompt.tidyprompt","text":"Validate tidyprompt","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.tidyprompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate tidyprompt — tidyprompt.tidyprompt","text":"","code":"# S3 method for class 'tidyprompt' tidyprompt(input)"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.tidyprompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate tidyprompt — tidyprompt.tidyprompt","text":"input tidyprompt object","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/tidyprompt.tidyprompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate tidyprompt — tidyprompt.tidyprompt","text":"input object tidyprompt valid, otherwise error thrown","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/vector_list_to_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a named or unnamed list/vector to a string representation — vector_list_to_string","title":"Convert a named or unnamed list/vector to a string representation — vector_list_to_string","text":"Converts named unnamed list/vector string format, intended sending LLM (display logging).","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/vector_list_to_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a named or unnamed list/vector to a string representation — vector_list_to_string","text":"","code":"vector_list_to_string(obj, how = c(\"inline\", \"expanded\"))"},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/vector_list_to_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a named or unnamed list/vector to a string representation — vector_list_to_string","text":"obj list vector (named unnamed) converted string. way object converted string; either \"inline\" \"expanded\". \"inline\" presents key-value pairs values single line. \"expanded\" presents key-value pair value separate line.","code":""},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/vector_list_to_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a named or unnamed list/vector to a string representation — vector_list_to_string","text":"single string representing list/vector.","code":""},{"path":[]},{"path":"https://tjarkvandemerwe.github.io/tidyprompt/reference/vector_list_to_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a named or unnamed list/vector to a string representation — vector_list_to_string","text":"","code":"named_vector <- c(x = 10, y = 20, z = 30)  vector_list_to_string(named_vector, how = \"inline\") |>   cat() #> x: 10, y: 20, z: 30  vector_list_to_string(named_vector, how = \"expanded\") |>   cat() #> x: 10 #> y: 20 #> z: 30"}]
