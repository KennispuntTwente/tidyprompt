% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidyprompt.R
\name{tidyprompt}
\alias{tidyprompt}
\title{Methods to create, construct, and empower prompt objects}
\usage{
tidyprompt(input)
}
\arguments{
\item{input}{Input to prompt. If a character string is passed,
a new prompt object will be created with that character string as the base prompt.}
}
\value{
A prompt object (or an error if an unsuitable input is provided)
}
\description{
A tidyprompt is an object which contains an initial prompt text
and a list of \code{\link[=prompt_wrap]{prompt_wrap()}}. The prompt wraps contain functions
which modify the prompt text in some way, and, once the LLM response
to the prompt is given, apply extraction and validation to the response.
Using a \code{\link[=tidyprompt]{tidyprompt()}} and \code{\link[=prompt_wrap]{prompt_wrap()}} objects allows for easy
chaining of modifications and empowerements to a prompt, ensuring
that the LLM output will meet the desired criteria. The \code{\link[=tidyprompt]{tidyprompt()}}
object offers many possibilities, such as structured and validated output,
LLM function calling, and LLM code generation and evaluation.
}
\examples{
tidyprompt("Hi!")

# Add to a tidyprompt using a prompt_wrap():
tidyprompt("Hi!") |>
  add_text("How are you?")

# Strings can be input for prompt wraps; therefore,
#   a call to tidyprompt() is not necessary:
"Hi" |>
  add_text("How are you?")

# Example of adding extraction & validation with a prompt_wrap():
prompt <- "Hi" |>
  add_text("What is 5 + 5?") |>
  answer_as_integer()

\dontrun{
  # tidyprompt objects are evaluated by send_prompt(), which will
  #   handle construct the prompt text, send it to the LLM provider,
  #   and apply the extraction and validation functions from the tidyprompt object
  prompt |>
    send_prompt(llm_provider_ollama())
  # --- Sending request to LLM provider (llama3.1:8b): ---
  #   Hi
  #
  #   What is 5 + 5?
  #
  #   You must answer with only an integer (use no other characters).
  # --- Receiving response from LLM provider: ---
  #   10
  # [1] 10

  # See prompt_wrap() and send_prompt() for more details
}

# `tidyprompt` objects may be validated with these helpers:
valid_tidyprompt <- validate_tidyprompt(prompt) # Returns self if valid
is_valid <- is_tidyprompt(prompt) # Returns TRUE if valid

# Get base prompt text
get_base_prompt(prompt)

# Get all prompt wraps
get_prompt_wraps(prompt)

# Get ordered prompt wraps (by type: tool, mode, unspecified)
get_prompt_wraps_ordered(prompt)

# Construct prompt text
construct_prompt_text(prompt)

# Get extraction and validation functions
get_extractions_and_validations(prompt)
}
\seealso{
\code{\link[=prompt_wrap]{prompt_wrap()}} \code{\link[=send_prompt]{send_prompt()}}
}
