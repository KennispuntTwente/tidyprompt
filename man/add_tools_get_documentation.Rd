% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_tools.R
\name{add_tools_get_documentation}
\alias{add_tools_get_documentation}
\title{Extract docstring-documentation from a function}
\usage{
add_tools_get_documentation(func, name = NULL)
}
\arguments{
\item{func}{A function object. The function should belong to a package
and have roxygen-documentation available in a help file, or it should
contain internal, roxygen-like, docstring-like documentation,
with the 'llm_tool::' tags: 'name', 'description', 'param', and 'return'
(e.g., llm_tool::name my_function_name) (see example)}

\item{name}{The name of the function if already known (optional).
If not provided it will be extracted from the docstring-like documentation
if available, or from the function object's name}
}
\value{
A list with the following elements:
\itemize{
\item name: The name of the function
\item description: A description of the function
\item arguments: A named list of arguments with descriptions
\item return_value: A description of the return value
}
}
\description{
This function parses either the internal, docstring-like documentation or
the help file documentation from a function. It is used to extract
information about the function's name, description, arguments, and return value.
This information is used to provide an LLM with information about the functions,
so that the LLM can call R functions.
}
\examples{
# Example fake weather function to add to the prompt:
temperature_in_location <- function(
    location = c("Amsterdam", "Utrecht", "Enschede"),
    unit = c("Celcius", "Fahrenheit")
) {
  location <- match.arg(location)
  unit <- match.arg(unit)

  temperature_celcius <- switch(
    location,
    "Amsterdam" = 32.5,
    "Utrecht" = 19.8,
    "Enschede" = 22.7
  )

  if (unit == "Celcius") {
    return(temperature_celcius)
  } else {
    return(temperature_celcius * 9/5 + 32)
  }
}

# Add documentation to the function:
temperature_in_location <- add_tools_add_documentation(
  temperature_in_location,
  description = "Get the temperature in a location",
  arguments = list(
    location = "Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'",
    unit = "Unit, must be one of: 'Celcius', 'Fahrenheit'"
  ),
  return_value = "The temperature in the specified location and unit"
)

# Attempt to extract documentation as it is extracted by add_tools():
add_tools_get_documentation(temperature_in_location)

# You can also pass functions which are included in packages;
#   documentation is then extracted from help files:
add_tools_get_documentation(list.files)

# Example usage:
prompt1 <- "Hi, what is the weather in Enschede? Give me Celcius degrees" |>
  add_tools(temperature_in_location)

prompt2 <- "What are the files in my current directory?" |>
  add_tools(list.files)

\dontrun{
  prompt1 |>
    send_prompt(llm_provider_ollama())
  #   --- Sending request to LLM provider (llama3.1:8b): ---
  #     Hi, what is the weather in Enschede? Give me Celcius degrees
  #
  #     If you need more information, you can call functions to help you.
  #     To call a function, output a JSON object with the following format:
  #
  #       {
  #         "function": "<function name>",
  #         "arguments": {
  #           "<argument_name>": <argument_value>,
  #           ...
  #         }
  #       }
  #
  #     (Note: you cannot call other functions within arguments.)
  #
  #     The following functions are available:
  #
  #       function name: temperature_in_location
  #     description: Get the temperature in a location
  #     arguments:
  #       - location: Location, must be one of: 'Amsterdam', 'Utrecht', 'Enschede'
  #     - unit: Unit, must be one of: 'Celcius', 'Fahrenheit'
  #     return value: The temperature in the specified location and unit
  #
  #     After you call a function, wait until you receive more information.
  #     Use the information to decide your next steps or provide a final response.
  #   --- Receiving response from LLM provider: ---
  #     To get the weather in Enschede, I'll need to call the
  #     `temperature_in_location` function.
  #
  #   Here's my JSON object:
  #   ```
  #     {
  #       "function": "temperature_in_location",
  #       "arguments": {
  #         "location": "Enschede",
  #         "unit": "Celcius"
  #       }
  #     }
  #   ```
  #
  #   I'll wait for your response...
  # --- Sending request to LLM provider (llama3.1:8b): ---
  #   function called: temperature_in_location
  #   arguments used: location = Enschede, unit = Celcius
  #   result: 22.7
  # --- Receiving response from LLM provider: ---
  #   The current temperature in Enschede is 22.7째C.
  #
  #   So, the final answer is:
  #   **22.7째C**
  #
  #   Is there anything else I can help you with?
  # [1] "The current temperature in Enschede is 22.7째C.\n\nSo, the final answer
  # is:\n**22.7째C**\n\nIs there anything else I can help you with?"

  prompt2 |>
    send_prompt(llm_provider_ollama())
  # ...
}
}
\seealso{
Other add_tools: 
\code{\link{add_tools}()}
}
\concept{add_tools}
