% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chat_history.R
\name{chat_history}
\alias{chat_history}
\title{Create or validate \code{chat_history} object}
\usage{
chat_history(chat_history)
}
\arguments{
\item{chat_history}{A single string, a \code{data.frame} with 'role' and 'content' columns,
or NULL. If a \code{data.frame} is provided, it should contain 'role' and 'content' columns,
where 'role' is either 'user', 'assistant', or 'system', and 'content' is a character string
representing a chat message}
}
\value{
A valid chat history \code{data.frame} (of class \code{chat_history})
}
\description{
This function creates and validates a \code{chat_history} object, ensuring that it matches
the expected format with 'role' and 'content' columns. It has separate methods
for \code{data.frame} and \code{character} inputs and includes a helper function to add a
system prompt to the chat history.
}
\examples{
chat <- "Hi there!" |>
  chat_history()
chat

chat_from_df <- data.frame(
  role = c("user", "assistant"),
  content = c("Hi there!", "Hello! How can I help you today?")
) |>
  chat_history()
chat_from_df

# `add_msg_to_chat_history()` may be used to add messages to a chat history
chat_from_df <- chat_from_df |>
  add_msg_to_chat_history("Calculate 2+2 for me, please!")
chat_from_df

# You can also call `add_msg_to_chat_history()` on a list
#   containing '$chat_history`;
#   e.g., a result of `send-prompt()` with `return_mode = "full"`
#     This may be used to continue a chat history in a new session
\dontrun{
  result <- "Hi there!" |>
    send_prompt(return_mode = "full")
  result$response
}
}
\concept{chat_history}
